Lenguaje R3

;	| --	R: a -- Fin de palabra

>R 		| a --      R: -- a
R> 		| -- a		R: a --
R		| -- a      R: a -- a
RDROP	| --		R: a --

0? 	| --		Es 0 el tope de la pila ?
+? 	| --		Es positivo el tope de la pila ?
-?	| --		Es negativo el tope de la pila ?
1? 	| --		Es distinto a 0 el tope de la pila ?
=?	| a b -- a	a = b ?
<?	| a b -- a	a < b ?
>?	| a b -- a	a > b ?
<=?	| a b -- a	a <= b ?
>=?	| a b -- a	a >= b ?
<>?	| a b -- a	a <> b ?
AND?	| a b -- a	a and b ?
NAND?	| a b -- a	a nand b ?
BTWN?	| a b c -- a<=b<=c?

?? (   ) 		| IF
?? (   ()  )	| IF-ELSE
(   ?? ()   ) 	| WHILE
(   ?? ) 		| UNTIL

[	; ]			| Inicio y Fin de definicion Anonima

EXEC  	| vector --  Llama al codigo del vector
NTH@	| nro listavector --	nro*4+listavector @

DUP 	| a -- a a
DROP 	| a --
OVER 	| a b -- a b a
PICK2 	| a b c -- a b c a
PICK3 	| a b c d -- a b c d a
PICK4 	| a b c d e -- a b c d e a
SWAP 	| a b -- b a
NIP		| a b -- b
ROT 	| a b c -- b c a
2DUP 	| a b -- a b a b
2DROP   | a b --
3DROP   | a b c --
4DROP   | a b c d --
2OVER	| a b c d -- a b c d a b
2SWAP	| a b c d -- c d a b


AND 	| a b -- c     c = a AND b
OR 		| a b -- c     c = a OR b
XOR 	| a b -- c     c = a XOR b
NOT  	| a b -- c     c = a NOT b
+ 		| a b -- c	c=a+b
- 		| a b -- c	c=a-b
* 		| a b -- c	c=a*b
/ 		| a b -- c	c=a/b
*/ 		| a b c -- d	d=a*b/c	resultado intermedio en 64 bits
*>>		| a b c -- d	d=(a*b)>>c	 resultado intermedio en 64 bits
<</		| a b c -- d	d(a<<c)/b  64 bits!
/MOD 	| a b -- c d	c=a/b  d=a resto b
MOD 	| a b -- c		c=a resto b
ABS		| a -- b		b=|a|
CLZ		| a -- b		count leanding zeros
SQRT	| a -- b		square root
NEG 	| a -- b		b=-a
2/ 		| a -- b		b=a/2
2* 		| a -- b		b=a*2
<< 		| a b -- c		c=a<<b
>> 		| a b -- c		b=a>>b (arrastra signo)
0>		| a b -- c		b=a>>b (arrastra zero)

@ 		| a -- b		b=32(a)
C@ 		| a -- b		b=8 (a)
W@		| a -- b		b=16(a)
!		| v d --		32(d) = v
C!		| v d --		8(d) = v
W! 		| v d --		16(d) = v
+! 		| v d --		32(d)=32(d)+v
C+!		| v d --		8(d)=8(d)+v
W+!  	| v d --		16(d)=16(d)+v
@+		| d -- d+4 v	dword (32bits)
!+		| v d -- d+4
C@+		| d -- d+1 v	byte (8bits)
C!+		| v d -- d+1
W@+		| d -- d+2 v	word (16bits)
W!+		| v d -- d+2

>A		| a --      S=a
A@		| -- v
Ac@		| -- v8		S+4
A@+		| -- v
Ac@+	| -- v8		S+1
A!+		| v --		v=(s);d+4
Ac!+	| v --		v=(s);d+1
A+		| a --

>B		| a --		d=a
B@		| -- v
B!+		| v --		v=(d);d+4
B+		| c	--		d+c

MOVE	| de sr cnt --	Copia CNT dword de SR a DE
MOVE>   | de sr cnt --	Copia CNT dword de SR a DE (para atras)
CMOVE   | de sr cnt --	Copia CNT bytes de SR a DE
CMOVE>  | de sr cnt --	Copia CNT bytes de SR a DE (para atras)

MEM		| -- dir 				Direccion de inicio de memoria libre

UPDATE	| s -- s	Actualiza las irqel raton, el teclado, sonido, etc, s=sleep time
MSEC 	| -- a 		milisegundos del sistema
TIME 	| -- s m h 	hora minutos y segundos
DATE 	| -- d m a	dia mes y anio

LOAD	| d "filename" -- e		Carga un archivo en memoria, E direccion de fin E-D bytes leidos
SAVE	| d n "filename" -- 	Graba memoria D en un archivo, N bytes
APPEND	| d n "filename" -- 	Graba memoria D en un archivo, N bytes
FFIRST  | "path" -- fdd/0		Obtiene la primera entrada de la carpeta
FNEXT 	| -- fdd/0				Obtiene la siguiente entrada en la carpeta,0 es fin

SW 		| -- w		Ancho de pantalla
SH 		| -- h		Alto de pantalla
CLS		| --		Limpia pantalla
REDRAW  | --		Dibuja nuevo FRAME
FRAMEV	| -- m		Memoria de video
FRAMEVXY	| x y -- d


ALPHA 	| a --		Transparencia (canal alpha)
INK		| -- 'i		direccion de dibujo
OP 		| x y --	Punto de origen

LINE 	| x y --	Traza linea
CURVE 	| x y x y --	Traza curva
CURVE3 	| x y x y x y --	Traza curva

PLINE 	| x y --	Traza linea poligono
PCURVE 	| x y x y --	Traza curva poligono
PCURVE3 | x y x y x y --	Traza curva poligono
POLI	| --		Traza poligono


XYMOUSE | -- x y 	coordenadas de la pantalla del apuntador
BMOUSE	| -- b		estado del apuntado
IKEY!	| v --    	vector de irq del teclado
KEY		| -- s		ultima tecla pulsada (scancode)


CNTJOY	| -- cnt	cantidad de joysticks
GETJOY	| j -- a	direccion de los datos de joystick J


SLOAD	| "" -- pp	carga sonido .mp3,.ogg
SPLAY	| pp -- 	suena sonido
MLOAD	| "" -- mm	carga musica .xm
MPLAY	| mm --		suena musica


OPENURL	| url header buff -- buff/0		abre URL


SYSTEM	| "cmd" -- status		ejecuta cmd de sistema/0 end/-1 check
