;---r3 compiler code.asm;--------------------------; :mbuffi (2) l <2>  nivel:0 len:9 [  -- a ]W1:; [ ]  ddata ; [ 0 ]  Nd ; [ 0 1 ]  + ; [ 0 ]  Nd ; [ 0 2 ]  OVER ; [ 0 2 3 ]  C! ; [ 0 ]  Nd ; [ 0 4 ]  - ; [ 0 ]  ; ; ---- cells ----; 0 R:0 W:2 (0:9) 1; 1 R:1 W:0 U (1:2) 0; 2 R:0 W:0 U (3:5) 0; 3 R:0 W:0 U (4:5) 0; 4 R:1 W:0 U (6:7) 0; [  ]  ddata ; [ w0 ]  Nd ; [ w0 $2F ]  + mov eax,w0add eax,$2F; [ eax ]  Nd ; [ eax $0 ]  OVER ; [ eax $0 eax ]  C! mov byte[eax],$0; [ eax ]  Nd ; [ eax $1 ]  - sub eax,$1; [ eax ]  ; lea ebp,[ebp+4]ret;--------------------------; :sign (B) l; <1>  nivel:0 len:12 [ ab -- c ]W2:; [ 0 1 ]  -? ; [ 0 1 ]  ( ; [ 0 1 ]  DROP ; [ 0 ]  Nd ; [ 0 2 ]  OVER ; [ 0 2 3 ]  C! ; [ 0 ]  ; ; [ 0 ]  ) ; [ 0 1 ]  DROP ; [ 0 ]  Nd ; [ 0 4 ]  + ; [ 0 ]  ; ; ---- cells ----; 0 R:0 W:1 (0:12) 1; 1 R:1 W:0 U (0:10) 0; 2 R:0 W:0 U (3:5) 0; 3 R:0 W:0 U (4:5) 0; 4 R:1 W:0 U (9:10) 0; [ dword[ebp-4] eax ]  -? or eax,eaxjns _o1; [ dword[ebp-4] eax ]  ( ; [ dword[ebp-4] eax ]  DROP ; [ dword[ebp-4] ]  Nd ; [ dword[ebp-4] $2D ]  OVER ; [ dword[ebp-4] $2D dword[ebp-4] ]  C! mov ecx,dword[ebp-4]mov byte[ecx],$2D; [ dword[ebp-4] ]  ; lea ebp,[ebp-4]mov eax,dword[ebp]ret; [ eax ]  ) _o1:; [ dword[ebp-4] eax ]  DROP ; [ dword[ebp-4] ]  Nd ; [ dword[ebp-4] $1 ]  + mov eax,dword[ebp-4]add eax,$1; [ eax ]  ; ret;--------------------------; :.d (17) e <1>  nivel:1 len:21 [ a -- b ]W3:; [ 0 ]  DUP ; [ 0 1 ]  ABS ; [ 0 1 ]  call ; [ 0 1 2 ]  SWAP ; [ 0 2 1 ]  ( ; [ 0 2 1 ]  DUP ; [ 0 2 1 3 ]  Nh ; [ 0 2 1 3 4 ]  Nh ; [ 0 2 1 3 4 5 ]  *>> ; [ 0 2 1 3 ]  DUP ; [ 0 2 1 3 6 ]  Nh ; [ 0 2 1 3 6 7 ]  >> ; [ 0 2 1 3 6 ]  - ; [ 0 2 1 3 ]  SWAP ; [ 0 2 3 1 ]  OVER ; [ 0 2 3 1 8 ]  Nh ; [ 0 2 3 1 8 9 ]  - ; [ 0 2 3 1 8 ]  + ; [ 0 2 3 1 ]  Nd ; [ 0 2 3 1 A ]  PICK2 ; [ 0 2 3 1 A B ]  C! ; [ 0 2 3 1 ]  SWAP ; [ 0 2 1 3 ]  Nd ; [ 0 2 1 3 C ]  - ; [ 0 2 1 3 ]  SWAP ; [ 0 2 3 1 ]  1? ; [ 0 2 3 1 ]  ) ; [ 0 2 3 1 ]  DROP ; [ 0 2 3 ]  SWAP ; [ 0 3 2 ]  call ; [ 0 D ]  ; ; ---- cells ----; 0 R:1 W:0 U (0:31) 0; 1 R:2 W:2 (0:27) 1; 2 R:0 W:0 U (2:29) 0; 3 R:1 W:3 A (5:29) 2; 4 R:1 W:0 U (6:8) 0; 5 R:1 W:0 U C (7:8) 0; 6 R:1 W:0 U (9:12) 0; 7 R:1 W:0 U C (10:11) 0; 8 R:1 W:1 (14:17) 3; 9 R:1 W:0 U (15:16) 0; 10 R:0 W:0 U (18:20) 0; 11 R:0 W:0 U (19:20) 0; 12 R:1 W:0 U (22:23) 0; 13 R:0 W:0 U (29:31) 0; [ eax ]  DUP ; [ eax eax ]  ABS mov edx,eaxsar edx,31add eax,edxxor eax,edx; [ eax eax ]  call lea ebp,[ebp+4]mov dword[ebp-4],eaxcall w1; [ dword[ebp-8] dword[ebp-4] eax ]  SWAP ; [ dword[ebp-8] eax dword[ebp-4] ]  ( xchg eax,dword[ebp-4]_i2:; [ dword[ebp-8] dword[ebp-4] eax ]  DUP ; [ dword[ebp-8] dword[ebp-4] eax eax ]  Nh ; [ dword[ebp-8] dword[ebp-4] eax eax $66666667 ]  Nh ; [ dword[ebp-8] dword[ebp-4] eax eax $66666667 $22 ]  *>> mov ebx,$66666667cdqimul ebxsar edx,($22-32); [ dword[ebp-8] dword[ebp-4] eax edx ]  DUP ; [ dword[ebp-8] dword[ebp-4] eax edx edx ]  Nh ; [ dword[ebp-8] dword[ebp-4] eax edx edx $1F ]  >> sar edx,$1F; [ dword[ebp-8] dword[ebp-4] eax edx edx ]  - sub edx,edx; [ dword[ebp-8] dword[ebp-4] eax edx ]  SWAP ; [ dword[ebp-8] dword[ebp-4] edx eax ]  OVER ; [ dword[ebp-8] dword[ebp-4] edx eax edx ]  Nh ; [ dword[ebp-8] dword[ebp-4] edx eax edx $A ]  - sub edx,$A; [ dword[ebp-8] dword[ebp-4] edx eax edx ]  + add eax,edx; [ dword[ebp-8] dword[ebp-4] edx eax ]  Nd ; [ dword[ebp-8] dword[ebp-4] edx eax $30 ]  PICK2 ; [ dword[ebp-8] dword[ebp-4] edx eax $30 edx ]  C! mov byte[edx],$30; [ dword[ebp-8] dword[ebp-4] edx eax ]  SWAP ; [ dword[ebp-8] dword[ebp-4] eax edx ]  Nd ; [ dword[ebp-8] dword[ebp-4] eax edx $1 ]  - sub edx,$1; [ dword[ebp-8] dword[ebp-4] eax edx ]  SWAP ; [ dword[ebp-8] dword[ebp-4] edx eax ]  1? or eax,eaxjz _o2; [ dword[ebp-8] dword[ebp-4] edx eax ]  ) lea ebp,[ebp+4]mov dword[ebp-4],edxjmp _i2_o2:; [ dword[ebp-8] dword[ebp-4] edx eax ]  DROP ; [ dword[ebp-8] dword[ebp-4] edx ]  SWAP ; [ dword[ebp-8] edx dword[ebp-4] ]  call lea ebp,[ebp-4]mov dword[ebp-8],dword[ebp-4]mov dword[ebp-4],edxmov eax,dword[ebp]jmp w2; [ dword[ebp-8] dword[ebp-4] eax ]  ; ;--------------------------; :.h (42) e <1>  nivel:1 len:28 [ a -- b ]W5:; [ 0 ]  call ; [ 0 1 ]  SWAP ; [ 1 0 ]  ( ; [ 1 0 ]  DUP ; [ 1 0 2 ]  Nd ; [ 1 0 2 3 ]  AND ; [ 1 0 2 ]  Nd ; [ 1 0 2 4 ]  + ; [ 1 0 2 ]  Nd ; [ 1 0 2 5 ]  >? ; [ 1 0 2 ]  ( ; [ 1 0 2 ]  Nd ; [ 1 0 2 6 ]  + ; [ 1 0 2 ]  ) ; [ 1 0 2 ]  PICK2 ; [ 1 0 2 7 ]  C! ; [ 1 0 ]  SWAP ; [ 0 1 ]  Nd ; [ 0 1 8 ]  - ; [ 0 1 ]  SWAP ; [ 1 0 ]  Nd ; [ 1 0 9 ]  >>> ; [ 1 0 ]  1? ; [ 1 0 ]  ) ; [ 1 0 ]  DROP ; [ 1 ]  Nd ; [ 1 A ]  + ; [ 1 ]  ; ; ---- cells ----; 0 R:2 W:0 U (0:24) 0; 1 R:0 W:2 (0:28) 1; 2 R:1 W:3 (3:15) 2; 3 R:1 W:0 U (4:5) 0; 4 R:1 W:0 U (6:7) 0; 5 R:1 W:0 U (8:9) 0; 6 R:1 W:0 U (11:12) 0; 7 R:0 W:0 U (14:15) 0; 8 R:1 W:0 U (17:18) 0; 9 R:1 W:0 U C (20:21) 0; 10 R:1 W:0 U (25:26) 0; [ eax ]  call call w1; [ dword[ebp-4] eax ]  SWAP ; [ eax dword[ebp-4] ]  ( xchg eax,dword[ebp-4]_i4:; [ dword[ebp-4] eax ]  DUP ; [ dword[ebp-4] eax eax ]  Nd ; [ dword[ebp-4] eax eax $F ]  AND and eax,$F; [ dword[ebp-4] eax eax ]  Nd ; [ dword[ebp-4] eax eax $30 ]  + add eax,$30; [ dword[ebp-4] eax eax ]  Nd ; [ dword[ebp-4] eax eax $39 ]  >? cmp eax,$39jle _o5; [ dword[ebp-4] eax eax ]  ( lea ebp,[ebp+4]mov dword[ebp-4],eax; [ dword[ebp-8] dword[ebp-4] eax ]  Nd ; [ dword[ebp-8] dword[ebp-4] eax $8 ]  + add eax,$8; [ dword[ebp-8] dword[ebp-4] eax ]  ) _o5:; [ dword[ebp-8] dword[ebp-4] eax ]  PICK2 ; [ dword[ebp-8] dword[ebp-4] eax dword[ebp-8] ]  C! mov ecx,dword[ebp-8]mov byte[ecx],eax; [ dword[ebp-8] dword[ebp-4] ]  SWAP ; [ dword[ebp-4] dword[ebp-8] ]  Nd ; [ dword[ebp-4] dword[ebp-8] $1 ]  - mov ebx,dword[ebp-8]sub ebx,$1; [ dword[ebp-4] ebx ]  SWAP ; [ ebx dword[ebp-4] ]  Nd ; [ ebx dword[ebp-4] $4 ]  >>> shr dword[ebp-4],$4; [ ebx dword[ebp-4] ]  1? or dword[ebp-4],dword[ebp-4]jz _o4; [ ebx dword[ebp-4] ]  ) lea ebp,[ebp-4]mov dword[ebp-4],ebxmov eax,dword[ebp]jmp _i4_o4:; [ ebx dword[ebp-4] ]  DROP ; [ ebx ]  Nd ; [ ebx $1 ]  + add ebx,$1; [ ebx ]  ; lea ebp,[ebp-4]mov eax,ebxret;--------------------------; :onshow (67) e <1>  nivel:1 len:20 [ a --  ]W8:; [ 0 ]  Nd ; [ 0 1 ]  ddata ; [ 0 1 2 ]  ! ; [ 0 ]  Nd ; [ 0 3 ]  ( ; [ 0 3 ]  DROP ; [ 0 ]  Nd ; [ 0 4 ]  UPDATE ; [ 0 4 ]  DROP ; [ 0 ]  DUP ; [ 0 5 ]  EX ; [ 0 ]  REDRAW ; [ 0 ]  var ; [ 0 6 ]  1? ; [ 0 6 ]  ) ; [ 0 6 ]  2DROP ; [ ]  Nd ; [ 7 ]  ddata ; [ 7 8 ]  ! ; [ ]  ; ; ---- cells ----; 0 R:1 W:0 U (0:15) 0; 1 R:0 W:0 U (0:2) 0; 2 R:0 W:0 U (1:2) 0; 3 R:0 W:0 U (3:5) 0; 4 R:0 W:0 U (6:8) 0; 5 R:0 W:0 U (9:0) 0; 6 R:1 W:0 U (12:15) 0; 7 R:0 W:0 U (16:18) 0; 8 R:0 W:0 U (17:18) 0; [ eax ]  Nd ; [ eax $0 ]  ddata ; [ eax $0 w7 ]  ! mov dword[w7],$0; [ eax ]  Nd ; [ eax $0 ]  ( lea ebp,[ebp+4]mov dword[ebp-4],eaxmov eax,$0_i6:; [ dword[ebp-4] eax ]  DROP ; [ dword[ebp-4] ]  Nd ; [ dword[ebp-4] $A ]  UPDATE mov eax,$Acall SYSUPDATE; [ dword[ebp-4] eax ]  DROP ; [ dword[ebp-4] ]  DUP ; [ dword[ebp-4] dword[ebp-4] ]  EX mov eax,dword[ebp-4]call eax; [ dword[ebp-4] eax ]  REDRAW call SYSREDRAW; [ dword[ebp-4] eax ]  var ; [ dword[ebp-4] eax dword[w7] ]  1? or dword[w7],dword[w7]jz _o6; [ dword[ebp-4] eax dword[w7] ]  ) lea ebp,[ebp+4]mov dword[ebp-4],eaxmov eax,dword[w7]jmp _i6_o6:; [ dword[ebp-4] eax dword[w7] ]  2DROP ; [ dword[ebp-4] ]  Nd ; [ dword[ebp-4] $0 ]  ddata ; [ dword[ebp-4] $0 w7 ]  ! mov dword[w7],$0; [ dword[ebp-4] ]  ; lea ebp,[ebp-8]mov eax,dword[ebp+4]ret;--------------------------; :cls (83) e <1>  nivel:0 len:7 [  --  ]WE:; [ ]  Nd ; [ 0 ]  VFRAME ; [ 0 1 ]  SW ; [ 0 1 2 ]  SH ; [ 0 1 2 3 ]  * ; [ 0 1 2 ]  FILL ; [ ]  ; ; ---- cells ----; 0 R:0 W:0 U SI (0:5) 0; 1 R:0 W:0 U DI (1:5) 0; 2 R:0 W:1 C (2:5) 1; 3 R:1 W:0 U (3:4) 0; [  ]  Nd ; [ $FF ]  VFRAME ; [ $FF SYSFRAME ]  SW ; [ $FF SYSFRAME XRES ]  SH ; [ $FF SYSFRAME XRES YRES ]  * mov eax,XRESimul eax,YRES; [ $FF SYSFRAME eax ]  FILL mov eax,$FFmov edi,SYSFRAMEmov ecx,eaxrep stosq; [  ]  ; ret;--------------------------; :xy>v (8A) e <1>  nivel:0 len:8 [ ab -- c ]WF:; [ 0 1 ]  SW ; [ 0 1 2 ]  * ; [ 0 1 ]  + ; [ 0 ]  Nd ; [ 0 3 ]  << ; [ 0 ]  VFRAME ; [ 0 4 ]  + ; [ 0 ]  ; ; ---- cells ----; 0 R:0 W:2 (0:8) 1; 1 R:1 W:1 (0:2) 2; 2 R:1 W:0 U (0:1) 0; 3 R:1 W:0 U C (3:4) 0; 4 R:1 W:0 U (5:6) 0; [ dword[ebp-4] eax ]  SW ; [ dword[ebp-4] eax XRES ]  * imul eax,XRES; [ dword[ebp-4] eax ]  + add eax,dword[ebp-4]; [ eax ]  Nd ; [ eax $2 ]  << shl eax,$2; [ eax ]  VFRAME ; [ eax SYSFRAME ]  + add eax,SYSFRAME; [ eax ]  ; lea ebp,[ebp-4]ret;--------------------------; :setpix (1212) l; <1>  nivel:0 len:9 [ ab -- c ]W22:; [ 0 1 ]  NA? ; [ 0 ]  ( ; [ 0 ]  Nd ; [ 0 2 ]  A+ ; [ 0 ]  ; ; [ 0 ]  ) ; [ 0 ]  var ; [ 0 3 ]  A!+ ; [ 0 ]  ; ; ---- cells ----; 0 R:1 W:0 U (0:9) 0; 1 R:1 W:0 U (0:0) 0; 2 R:0 W:0 U (2:3) 0; 3 R:0 W:0 U (6:7) 0; [ dword[ebp-4] eax ]  NA? test dword[ebp-4],eaxjz _o17; [ dword[ebp-4] ]  ( lea ebp,[ebp-4]mov eax,dword[ebp]; [ eax ]  Nd ; [ eax $4 ]  A+ add esi,$4; [ eax ]  ; ret; [ eax ]  ) _o17:; [ eax ]  var ; [ eax dword[wA] ]  A!+ mov [esi],dword[wA]add esi,4; [ eax ]  ; ret;--------------------------; :char8pc (121B) e' <1>  nivel:1 len:39 [ a --  ]W23:; [ 0 ]  Nd ; [ 0 1 ]  << ; [ 0 ]  ddata ; [ 0 2 ]  + ; [ 0 ]  SW ; [ 0 3 ]  Nd ; [ 0 3 4 ]  - ; [ 0 3 ]  Nd ; [ 0 3 5 ]  << ; [ 0 3 ]  SWAP ; [ 3 0 ]  Nd ; [ 3 0 6 ]  ( ; [ 3 0 6 ]  1? ; [ 3 0 6 ]  Nd ; [ 3 0 6 7 ]  SWAP ; [ 3 0 7 6 ]  C@+ ; [ 3 0 7 6 8 ]  Nd ; [ 3 0 7 6 8 9 ]  ( ; [ 3 0 7 6 8 9 ]  1? ; [ 3 0 7 6 8 9 ]  OVER ; [ 3 0 7 6 8 9 A ]  call ; [ 3 0 7 6 8 B ]  Nd ; [ 3 0 7 6 8 B C ]  >> ; [ 3 0 7 6 8 B ]  ) ; [ 3 0 7 6 8 9 ]  2DROP ; [ 3 0 7 6 ]  PICK2 ; [ 3 0 7 6 D ]  A+ ; [ 3 0 7 6 ]  SWAP ; [ 3 0 6 7 ]  ) ; [ 3 0 7 6 8 9 ]  SW ; [ 3 0 7 6 8 9 E ]  Nd ; [ 3 0 7 6 8 9 E F ]  << ; [ 3 0 7 6 8 9 E ]  Nd ; [ 3 0 7 6 8 9 E 10 ]  - ; [ 3 0 7 6 8 9 E ]  NEG ; [ 3 0 7 6 8 9 E ]  A+ ; [ 3 0 7 6 8 9 ]  3DROP ; [ 3 0 7 ]  ; ; ---- cells ----; 0 R:0 W:1 (0:38) 1; 1 R:1 W:0 U C (0:1) 0; 2 R:1 W:0 U (2:3) 0; 3 R:0 W:1 (4:38) 2; 4 R:1 W:0 U (5:6) 0; 5 R:1 W:0 U C (7:8) 0; 6 R:1 W:1 (10:36) 3; 7 R:0 W:0 U (13:38) 0; 8 R:0 W:0 U (15:60) 0; 9 R:1 W:0 U (16:80) 0; 10 R:0 W:0 U (19:20) 0; 11 R:0 W:0 U (20:0) 0; 12 R:1 W:0 U C (21:22) 0; 13 R:0 W:0 U (25:26) 0; 14 R:0 W:2 (29:35) 4; 15 R:1 W:0 U C (30:31) 0; 16 R:1 W:0 U (32:33) 0; [ eax ]  Nd ; [ eax $4 ]  << shl eax,$4; [ eax ]  ddata ; [ eax w21 ]  + add eax,w21; [ eax ]  SW ; [ eax XRES ]  Nd ; [ eax XRES $8 ]  - mov ebx,XRESsub ebx,$8; [ eax ebx ]  Nd ; [ eax ebx $2 ]  << shl ebx,$2; [ eax ebx ]  SWAP ; [ ebx eax ]  Nd ; [ ebx eax $10 ]  ( lea ebp,[ebp+8]mov dword[ebp-8],ebxmov dword[ebp-4],eaxmov eax,$10_i18:; [ dword[ebp-8] dword[ebp-4] eax ]  1? or eax,eaxjz _o18; [ dword[ebp-8] dword[ebp-4] eax ]  Nd ; [ dword[ebp-8] dword[ebp-4] eax $1 ]  SWAP ; [ dword[ebp-8] dword[ebp-4] $1 eax ]  C@+ movsx eax,byte[eax]add eax,1; [ dword[ebp-8] dword[ebp-4] $1 eax eax ]  Nd ; [ dword[ebp-8] dword[ebp-4] $1 eax eax $80 ]  ( lea ebp,[ebp+12]mov dword[ebp-12],$1mov dword[ebp-8],eaxmov dword[ebp-4],eaxmov eax,$80_i19:; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  1? or eax,eaxjz _o19; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  OVER ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax dword[ebp-4] ]  call lea ebp,[ebp+4]mov dword[ebp-4],eaxmov eax,dword[ebp-8]call w22; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  Nd ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax $1 ]  >> sar eax,$1; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  ) jmp _i19_o19:; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  2DROP ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] ]  PICK2 ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-16] ]  A+ add esi,dword[ebp-16]; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] ]  SWAP ; [ dword[ebp-20] dword[ebp-16] dword[ebp-8] dword[ebp-12] ]  ) lea ebp,[ebp-8]mov eax,dword[ebp]xchg eax,dword[ebp-4]jmp _i18_o18:; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  SW ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax XRES ]  Nd ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax XRES $6 ]  << shl XRES,$6; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax XRES ]  Nd ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax XRES $20 ]  - mov ebx,XRESsub ebx,$20; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ebx ]  NEG neg ebx; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ebx ]  A+ add esi,ebx; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] dword[ebp-8] dword[ebp-4] eax ]  3DROP ; [ dword[ebp-20] dword[ebp-16] dword[ebp-12] ]  ; lea ebp,[ebp-4]mov eax,dword[ebp-16]xchg eax,dword[ebp-8]mov dword[ebp-4],dword[ebp-12]ret;--------------------------; :size8pc (1242) e' <1>  nivel:0 len:2 [  -- a ]W24:; [ ]  Nd ; [ 0 ]  ; ; ---- cells ----; 0 R:0 W:0 U (0:2) 0; [  ]  Nd ; [ $8 ]  ; lea ebp,[ebp+4]mov eax,$8ret;--------------------------; :emit (124F) e <1>  nivel:3 len:9 [ a --  ]W2C:; [ 0 ]  Nd ; [ 0 1 ]  AND ; [ 0 ]  dcode ; [ 0 2 ]  EX ; [ ]  dcode ; [ 3 ]  EX ; [ 4 ]  ddata ; [ 4 5 ]  +! ; [ ]  ; ; ---- cells ----; 0 R:0 W:1 (0:3) 1; 1 R:1 W:0 U (0:1) 0; 2 R:0 W:0 U (2:0) 0; 3 R:0 W:0 U (4:0) 0; 4 R:0 W:0 U (5:7) 0; 5 R:0 W:0 U (6:7) 0; [ eax ]  Nd ; [ eax $FF ]  AND and eax,$FF; [ eax ]  dcode ; [ eax w23 ]  EX lea ebp,[ebp+4]mov dword[ebp-4],eaxmov eax,w23call eax; [ dword[ebp-4] eax ]  dcode ; [ dword[ebp-4] eax w24 ]  EX lea ebp,[ebp+4]mov dword[ebp-4],eaxmov eax,w24call eax; [ dword[ebp-8] dword[ebp-4] eax ]  ddata ; [ dword[ebp-8] dword[ebp-4] eax w25 ]  +! add dword[w25],eax; [ dword[ebp-8] dword[ebp-4] ]  ; lea ebp,[ebp-4]mov eax,dword[ebp]ret;--------------------------; :home (1258) e <1>  nivel:0 len:7 [  --  ]W2D:; [ ]  Nd ; [ 0 ]  ddata ; [ 0 1 ]  ! ; [ ]  Nd ; [ 2 ]  ddata ; [ 2 3 ]  ! ; [ ]  ; ; ---- cells ----; 0 R:0 W:0 U (0:2) 0; 1 R:0 W:0 U (1:2) 0; 2 R:0 W:0 U (3:5) 0; 3 R:0 W:0 U (4:5) 0; [  ]  Nd ; [ $0 ]  ddata ; [ $0 w25 ]  ! mov dword[w25],$0; [  ]  Nd ; [ $0 ]  ddata ; [ $0 w26 ]  ! mov dword[w26],$0; [  ]  ; ret;--------------------------; :print (125F) e <3>  nivel:4 len:11 [ a --  ]W2E:; [ 0 ]  var ; [ 0 1 ]  var ; [ 0 1 2 ]  call ; [ 0 3 ]  >A ; [ 0 ]  ( ; [ 0 ]  C@+ ; [ 0 4 ]  1? ; [ 0 4 ]  call ; [ 0 ]  ) ; [ 0 4 ]  2DROP ; [ ]  ; ; ---- cells ----; 0 R:0 W:1 (0:9) 1; 1 R:0 W:0 U (0:2) 0; 2 R:0 W:0 U (1:2) 0; 3 R:0 W:0 U (2:3) 0; 4 R:1 W:0 U (5:16) 0; [ eax ]  var ; [ eax dword[w25] ]  var ; [ eax dword[w25] dword[w26] ]  call lea ebp,[ebp+8]mov dword[ebp-8],eaxmov dword[ebp-4],dword[w25]mov eax,dword[w26]call wF; [ dword[ebp-4] eax ]  >A mov esi,eax; [ dword[ebp-4] ]  ( lea ebp,[ebp-4]mov eax,dword[ebp]_i1A:; [ eax ]  C@+ movsx eax,byte[eax]add eax,1; [ eax eax ]  1? or eax,eaxjz _o1A; [ eax eax ]  call lea ebp,[ebp+4]mov dword[ebp-4],eaxcall w2C; [ dword[ebp-4] ]  ) lea ebp,[ebp-4]mov eax,dword[ebp]jmp _i1A_o1A:; [ eax eax ]  2DROP ; [  ]  ; lea ebp,[ebp-4]ret;--------------------------; :cr (126A) e <1>  nivel:0 len:7 [  --  ]W2F:; [ ]  Nd ; [ 0 ]  ddata ; [ 0 1 ]  +! ; [ ]  Nd ; [ 2 ]  ddata ; [ 2 3 ]  ! ; [ ]  ; ; ---- cells ----; 0 R:0 W:0 U (0:2) 0; 1 R:0 W:0 U (1:2) 0; 2 R:0 W:0 U (3:5) 0; 3 R:0 W:0 U (4:5) 0; [  ]  Nd ; [ $10 ]  ddata ; [ $10 w26 ]  +! add dword[w26],$10; [  ]  Nd ; [ $0 ]  ddata ; [ $0 w25 ]  ! mov dword[w25],$0; [  ]  ; ret;--------------------------; :main (1273) l'R <1>  nivel:5 len:15 [  -- a ]W32:; [ ]  call ; [ ]  call ; [ ]  str ; [ 0 ]  call ; [ ]  KEY ; [ 1 ]  call ; [ 2 ]  call ; [ ]  call ; [ ]  var ; [ 3 ]  call ; [ 4 ]  call ; [ ]  Nd ; [ 5 ]  ddata ; [ 5 6 ]  +! ; [ ]  ; ; ---- cells ----; 0 R:0 W:0 U (2:3) 0; 1 R:0 W:0 U (4:5) 0; 2 R:0 W:0 U (5:6) 0; 3 R:0 W:0 U (8:9) 0; 4 R:0 W:0 U (9:10) 0; 5 R:0 W:0 U (11:13) 0; 6 R:0 W:0 U (12:13) 0; [  ]  call call wE; [  ]  call call w2D; [  ]  str ; [ str4F ]  call lea ebp,[ebp+4]mov eax,str4Fcall w2E; [  ]  KEY ; [ dword[SYSKEY] ]  call mov eax,dword[SYSKEY]call w3; [ eax ]  call call w2E; [  ]  call lea ebp,[ebp-4]call w2F; [  ]  var ; [ dword[w31] ]  call lea ebp,[ebp+4]mov eax,dword[w31]call w5; [ eax ]  call call w2E; [  ]  Nd ; [ $21 ]  ddata ; [ $21 w31 ]  +! add dword[w31],$21; [  ]  ; lea ebp,[ebp-4]ret;--------------------------; : (1282) l <1>  nivel:2 len:6 [  --  ]INICIO:; [ ]  Nd ; [ 0 ]  ddata ; [ 0 1 ]  ! ; [ ]  dcode ; [ 2 ]  call ; [ ]  ; ; ---- cells ----; 0 R:0 W:0 U (0:2) 0; 1 R:0 W:0 U (1:2) 0; 2 R:0 W:0 U (3:4) 0; [  ]  Nd ; [ $FF00FF ]  ddata ; [ $FF00FF wA ]  ! mov dword[wA],$FF00FF; [  ]  dcode ; [ w32 ]  call lea ebp,[ebp+4]mov eax,w32jmp w8; [ eax ]  ;  