| from Ehud Tamir
| https://medium.com/@ehudt/reversing-an-n-bit-number-in-o-log-n-time-9bf69363d452
|
|unsigned long reverse(unsigned long num) {
|  unsigned long s = 8 * sizeof(num); // bit size; must be power of 2
|  unsigned long mask = ~0;
|  while ((s >>= 1) > 0) {
|    mask ^= (mask << s);
|    num = ((num >> s) & mask) | ((num << s) & ~mask);
|  }
|  return num;
|}

::reverse | n -- rn
$ffffffff 32 | n mask s
( 2/ 1? )(
	2dup << | n mask s m<<s
	rot xor	| n s mask
	pick2 pick2 >> over and >r
	rot pick2 << over not and r>
	or	| s mask n
	swap rot
	) 2drop ;

