| analisis de ppila estatico
| PHREDA 2015
|------------------------------------
^r4/ide/r4-dicc.txt

#dstack )( 256
#dstack> 'dstack
#rstack )( 128
#rstack> 'rstack

#nreg
#reg )( 1024 | 256 registros

|----- pila para condicionales
#sst )( 1024 | pila de pilas
#sst> 'sst
#ssc )( 8192
#ssc> 'ssc

|---- BLOQUES
#blockn 0
#block )( 1024	| tipo+info
#blocks )( 1024 | celda comienzo
#blocke )( 1024 | celda fin
#blocki )( 1024 | celda medio

|----- pila para bloques
#pilab )( 256	#pilab> 'pilab

:newreg
	nreg
	0 over 2 << 'reg + !
	1 'nreg +! ;

:dpush	dstack> !+ 'dstack> ! ;
:dpop	-4 'dstack> +! dstack> @ ;

:d.TOS   dstack> 4 - @ ;
:d.NOS   dstack> 8 - @ ;
:d.PK2   dstack> 12 - @ ;
:d.PK3   dstack> 16 - @ ;
:d.PK4   dstack> 20 - @ ;

:rpush	rstack> !+ 'rstack> ! ;
:rpop	-4 'rstack> +! rstack> @ ;
:rcnt	rstack> 'rstack - ;
:r.TOS  rstack> 4 - @ ;

|----------------------------------------

:regR	2 << 'reg + dup @ $1 + swap ! ;
:regW	2 << 'reg + dup @ $100 + swap ! ;
:regM	2 << 'reg + dup @ $10000 or swap ! ;	| direccion de memoria dato
:regX	2 << 'reg + dup @ $20000 or swap ! ;	| direccion de memoria codigo
:regP	2 << 'reg + dup @ $40000 or swap ! ;	| parametro en pila
:regA	2 << 'reg + dup @ $80000 or swap ! ;	| transpasa una palabra
:regB	2 << 'reg + dup @ $100000 or swap ! ;	| transpasa un bloque

:regPALset
	'dstack ( dstack> <? )( @+ regA ) drop ;

:regBLOset
	'dstack ( dstack> <? )( @+ regB ) drop ;

|----------------------------------------

:,drop	-4 'dstack> +! ;
:,4drop ,drop
:,3drop ,drop
:,2drop ,drop ,drop ;
:,swap	dstack> 8 - >r r@+ r@+ r> 8 - !+ ! ;
:,nip	,swap ,drop ;
:,rot	dstack> 12 - >r r@+ r@+ r@+ swap r> 12 - !+ !+ ! ;
:,2swap	dstack> 16 - >r r@+ r@+ swap r@+ r@+ swap r> 16 - !+ !+ !+ ! ;

:,dup	d.TOS regR newreg dpush ;
:,over	d.NOS regR newreg dpush ;
:,pk2	d.PK2 regR newreg dpush ; |PICK2  abc -- abca
:,pk3	d.PK3 regR newreg dpush ; |PICK3  abcd -- abcda
:,pk4	d.PK4 regR newreg dpush ; |PICK4  abcde -- abcdea
:,2dup	,over ,over ; |2DUP   ab -- abab
:,2over	,pk3 ,pk3 ; |2OVER  abcd -- abcdab

:,uso6 d.TOS regR ,drop d.TOS regR ,drop
:,uso4 d.TOS regR ,drop
:,uso3 d.TOS regR ,drop
:,uso2 d.TOS regR ,drop
:,uso1 d.TOS regR ,drop ;

:,uso11 d.TOS regR ;
:,uso21 d.TOS regR ,drop d.TOS regR ;

:,1cte	newreg dpush ;
:,3v	newreg dpush
:,2v	newreg dpush
:,1v	newreg dpush ;

:,lit   newreg dpush ;
:,str   newreg dpush ;

:,var	| vv
	newreg dpush d.TOS regM ;
:,dvar	| 'v
	newreg dpush ;
:,dwor	| 'w
	newreg dpush d.TOS regX ;

:,wor	| ww
	regPALset
	dup 4 - @ 8 >> dic>mov @
	dup 16 << 24 >> | ud
	swap 24 << 24 >> | dd
	over ( 1? )( 1+ ,drop ) drop | used
	- abs ( 1? )( 1- newreg dpush ) drop
	;

|------- condicionales

:sst!   sst> !+ 'sst> ! ;
:sst@   -4 'sst> +! sst> @ ;

:pushvar
	ssc> dup sst!
	>r
	'dstack ( dstack> <? )( @+ r!+ ) drop
	-1 r!+
	'rstack ( rstack> <? )( @+ r!+ ) drop
	-1 r> !+ 'ssc> !
	;

:popvar
    sst@ dup 'ssc> !
	'dstack 'dstack> !
	( @+ -1 >? )( dpush ) drop
	'rstack 'rstack> !
	( @+ -1 >? )( rpush ) 2drop
	;

:pop2var
	sst> 8 - @	| no recupera la memoria
	'dstack 'dstack> !
	( @+ -1 >? )( dpush ) drop
	'rstack 'rstack> !
	( @+ -1 >? )( rpush ) 2drop
	sst> 4 - dup @ swap 4 - !+ 'sst> !
	;

:dropvar
	sst@ 'ssc> ! ;

:convar | conver to var
	sst@ dup 'ssc> !
	'dstack ( dstack> <? )( @+ "%h " ,print ) drop " : " ,s
	'rstack ( rstack> <? )( @+ "%h " ,print ) drop " -> " ,s
	'dstack 'dstack> !
	( @+ -1 >? )( dpush ) drop
	'rstack 'rstack> !
	( @+ -1 >? )( rpush ) 2drop
	;


:block.new blockn pilab> !+ 'pilab> ! 1 'blockn +! ;
:block.end -4 'pilab> +! ;
:block.now pilab> 4 - @ ; | -- nblo
:block.cnt pilab> 'pilab - 2 >> ;

:blocka		block.now 2 << 'block + ;

:blCLEAR	0 blocka ! ;
:blIF		blocka dup @ 0 or swap ! ;
:blELSE  	blocka dup @ 1 or swap ! ;
:blWHILE	blocka dup @ 2 or swap ! ;
:blUNTIL  	blocka dup @ 3 or swap ! ;
:blREPEAT  	blocka dup @ 4 or swap ! ;

:salto? | adr -- adr 1/0
	dup 8 - @ $ff and $16 >? ( $23 <? ( drop 1 ; ) ) drop 0 ;

:;?	| adr xx -- adr xx 1/0
	over 8 - @ $ff and $10 =? ( drop 1 ; ) drop 0 ;

:,(
	block.new blCLEAR |blINI
	pushvar salto? sst! ;

:,)(
	sst@ drop
	salto? 1? ( drop dropvar pushvar 3 sst! ; )	drop	| while
	pushvar pop2var 2 sst!			| else
	;

:,)
	sst@
	0? ( dropvar swap salto? 1? ( blUNTIL )( blREPEAT ) drop swap )        | until/repeat
	1 =? ( ;? 1? ( popvar )( convar ) drop blIF )      | if
	2 =? ( convar blELSE )         | else
	3 =? ( popvar blWHILE )        | while
	drop
	block.end ;

:,;
	;
| anonimas
:,[	;
:,]	newreg dpush d.TOS regX ;

:,c0 | 0? 1? ..
	d.TOS regR ;

:,c1 | =? <? ..
	d.TOS regR ,drop d.TOS regR ;

:,exec	regPALset d.TOS regX ,drop ;

:,>r	dpop rpush ;
:,r>	rpop dpush ;
:,r		rcnt 0? ( drop newreg dpush ; ) drop	| show consume R, no dR for now!
		r.TOS regR newreg dpush ;			|R		-- a R: a -- a
:,r+	r.TOS regW ,drop ;				|R+		a -- R: b -- c
:,r@+	r.TOS dup regM regW newreg dpush ;	|R@+	-- a R: b -- c
:,r!+	r.TOS dup regM regW ,drop ;			|R!+	a -- R: b -- c
:,rdrop	rpop drop ;


|--- aritmeticas y logicas
:op1a1	d.TOS regW ; | neg not 1+ 4+ 1- 2/ ..
:vop1a1 d.TOS regW ; | abs  clz  ..
:op2a1	d.TOS regR ,drop d.TOS regW ; | + - * and or xor ..
:vop2a1 d.TOS regR ,drop d.TOS regW ; | / mod
:xop2a1	d.TOS regR ,drop d.TOS regW ; | << >>
:op3a1	d.TOS regR ,drop d.TOS regR ,drop d.TOS regW ; | */
:vop3a1	d.TOS regR ,drop d.TOS regR ,drop d.TOS regW ; | *>> /<<

:op2a2	d.TOS regW d.NOS regW ; | mod/

:1@	| @ c@ w@
	d.TOS dup regM regW ;
:1!	| ! c! w!
	d.TOS dup regM regR ,drop d.TOS regR ,drop ;
:2@	| @+ c@+ w@+
	d.TOS dup regM regW newreg dpush ;
:2!	| !+ c!+ w!+
	,swap d.TOS regR ,drop d.TOS dup regM regW ;
:2+!	| +! c+! w+!
	d.TOS dup regM regR ,drop d.TOS regR ,drop ;

|----------------------------------------
#usostack 0
0 0 0 0 0 0 |,: ,:: ,# ,#: ,| ,^
,lit ,lit ,lit ,lit ,str
,wor ,var ,dwor ,dvar
,; ,( ,)( ,) ,[ ,] ,exec
,c0 ,c0 ,c0 ,c0 |,0? ,+? ,-? ,1?
,c1 ,c1 ,c1 ,c1 ,c1 ,c1 ,c1 ,c1 |,=? ,<? ,>? ,<=? ,>=? ,<>? ,and? ,nand?
,dup ,drop ,over ,pk2 ,pk3 ,pk4
,swap ,nip ,rot ,2dup ,2drop ,3drop ,4drop
,2over ,2swap
,>r ,r> ,r ,r+ ,r@+ ,r!+ ,rdrop
op2a1 op2a1 op2a1 op1a1 |,and ,or ,xor ,not
op2a1 op2a1 op2a1 op2a1 |,+ ,- ,* ,/
op3a1 vop3a1 op2a2 vop2a1 |,*/ ,*>> ,/mod ,mod
vop1a1 op1a1 vop1a1 vop3a1 |,abs ,sqrt ,clz ,<</
op1a1 op1a1 op1a1 op1a1 op1a1 op1a1 |,neg ,1+ ,4+ ,1- ,2/ ,2*
xop2a1 xop2a1 |,<< ,>>
1@ 1@ 1@        |,@ ,c@ ,w@
1! 1! 1!	|,! ,c! ,w!
2+! 2+!	2+!	|,+! ,c+! ,w+!
2@ 2! 2@ 2! 2@ 2!       |,@+ ,!+ ,c@+ ,c!+ ,w@+ ,w!+
,uso3	|MOVE  abc --       a,b es ddat
,uso3	|MOVE> abc --		a,b es ddat
,uso3	|CMOVE abc --		a,b es ddat
,uso3	|CMOVE> abc --		a,b es ddat
,1cte |MEM	-- a		a es ddat
,uso11	|FFIRST    a -- b
,1v		|FNEXT  -- a
,uso21	|LOAD   ab -- c
,uso3	|SAVE   abc --
,uso3	|APPEND   abc --
,uso11	|UPDATE  a -- a
,2v	|XYMOUSE -- ab
,1v	|BMOUSE  -- a
,uso1	|IKEY!  a --
,1v	|KEY     -- a
,1v	|CNTJOY  -- a
,1v	|GETJOY  -- a

,1v	|MSEC    -- a
,3v	|TIME    -- abc
,3v	|DATE    -- abc
0	|END     --
,uso1	|RUN    a --
,1cte	|SW      -- a
,1cte	|SH      -- a
0	|CLS     --
0	|REDRAW  --
,1v	|FRAMEV  -- a
,uso2	|SETXY  ab --
,uso1	|PX+!   a --
,uso1	|PX!+   a --
,1v	|PX@     -- a

,1cte	|XFB     -- a
0	|>XFB    --
0	|XFB>    --

,uso1	|PAPER  a --
,uso1	|INK    a --
,1v		|INK@    -- a
,uso1	|ALPHA  a --
,uso2	|OP     ab --
,uso2	|LINE   ab --
,uso4	|CURVE  abcd --
,uso6	|CURVE3  abcdef --
,uso2	|PLINE  ab --
,uso4	|PCURVE abcd --
,uso6	|PCURVE3 abcdef --
0		|POLI    --
,uso2	|FCOL   ab --
,uso2	|FCEN   ab --
,uso2	|FMAT   ab --
0	|SFILL   --
0	|LFILL   --
0	|RFILL   --
,uso1	|TFILL  a --

,uso11	|SLOAD   a -- a
,uso1	|SPLAY  a --
,uso11	|SINFO   a -- a
,uso4	|SISET  a a a a --
0
0 0 0 0
0 0 0 0 0
,uso11 | SYSTEM a -- a

|----------------------------------------
:stackini | deep --
	0 'nreg !
	'dstack 'dstack> !
	'rstack 'rstack> !
	'ssc 'ssc> !
	'sst 'sst> !
	( 1? )( 1- newreg dpush ) drop
	;

:fixtokenstr | cod -- ; fix width op print
	tokenstr
	mprint count swap ,print
	neg 16 + ( 1? )( 1- ,sp ) drop
	;

:calcstack | cod --
	$ff and 2 << 'usostack + @
	0? ( drop ; )
        exec ;

:sdump
	block.cnt ( 1? )( 1- "|" ,s ) drop
    " " ,s
	'dstack ( dstack> <? )(
		@+ "%h " ,print ) drop
	" : " ,s
	'rstack ( rstack> <? )(
		@+ "%h " ,print ) drop ;

:printstat | val --
	dup $ff and ,d ,sp
	dup 8 >> $ff and ,d ,sp
	16 >> ,b
	;

:dumpregs
	'reg >r
	";--- Nro: R  W  BAPXM" ,s ,cr
	0 ( nreg <? )(
		"; " ,s dup ,h " : " ,s r@+
		printstat
		,cr
		1+ ) drop rdrop ;

::stackanalisis | end ini --
	2dup getusedstack neg dup maxdepth ";--- mD:%d uD:%d :" ,print ,cr
	stackini
	( over <? )(
		@+ " ; " ,s
		dup fixtokenstr
		calcstack
		sdump ,cr
|	"r4asm/cod.asm" savemem	| DEBUG
		) 2drop
	dumpregs
|	"r4asm/cod.asm" savemem
	;

::stackanalisisa | end ini --
	2dup getusedstack neg
	stackini ( over <? )( @+ calcstack ) 2drop
	;
