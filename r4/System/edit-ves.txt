| reanimator.txt
| PHReda Nov2006
|----------------
^r4/lib/gui.txt
^r4/lib/dlg.txt
^r4/lib/vesprite.txt

^r4/lib/dlg.txt
^r4/lib/dlgfile.txt
^r4/lib/dlgcol.txt

^r4/lib/ricons.txt
^inc/ric/fontawesomewebfont.ric

#modo
#color
#xv #yv #sv
#ves 0
#ves>

| inicio x1y1 x2y2 color
#tra 0
#tra>

| scrach pad
#lin
#lin>

#po #pa
#xf #yf
#xfa #yfa
#xsa #ysa
#xca -1 #yca
#wpa #hpa

#cursor
#cursorn
#picktra -1

#xmin #ymin #xmax #ymax
#colp

|----------------------------------
:i.st
	$7fffffff dup 'xmin ! 'ymin !
	-$7fffffff dup 'xmax ! 'ymax ! ;

:a.st | adr --
    d>xy
    ymax >? ( dup 'ymax ! ) ymin <? ( dup 'ymin ! ) drop
    xmax >? ( dup 'xmax ! ) xmin <? ( dup 'xmin ! ) drop
	;

:t0 drop ;
:t1 8 >> 'colp ! ;
:t2 a.st @+ a.st ;
:t3 drop 4+ ; | cen mat
:t4 a.st ;
:t7 a.st @+ a.st @+ a.st ;
:tc 8 >> 'colp ! swap >r xmin ymin xy>d r!+ xmax ymax xy>d r!+ colp r!+ dup r!+ r> swap i.st ;

#lbox t0 t1 t2 t3 t4 t4 t2 t7 t4 t4 t2 t7 tc tc tc tc
:buildtra
	ves> 4+ dup 'tra !
	ves dup rot !+ swap i.st
	( ves> <? )(
     	@+ dup $f and 2 << 'lbox + @ exec
		) drop
	dup 'tra> !
	dup 'lin ! 0 over ! 'lin> !
	;

:rebuild1tra | tra --
	i.st
	4 << tra +
	@+ ( @+ dup $f and $b <? )(
		2 << 'lbox + @ exec
		) 3drop
	xmin ymin xy>d swap !+
	xmax ymax xy>d swap !
	;


:dumptra
	tra ( tra> <? )( >r
		r@+
		r@+ r@+ gc>xy rot gc>xy
		r@+ ink caja
		"%h " print
		r> ) drop ;



:lastnode | adr -- adr'
	( @+ $f and $b <? )( drop ) drop ;

|---------------------------------
:p1 2dup 3 fbox ink@ >r gris 3 box r> ink ;
:p2 2dup 3 fdiam ink@ >r gris 3 diam r> ink ;

:t0 drop ;
:t1 drop 4+ ;
:t2 dup 'pa ! gc>xy p1 ;
:t3 dup 'pa ! gc>xy p1
	@+ gc>xy p2 ;
:t4 >r @+ >r @+
	gc>xy 2dup op pa gc>xy line p2
	r> gc>xy 2dup op r> dup 'pa ! gc>xy 2dup line p1 p2 ;

#ltra t0 t0 t1 t1 t2 t2 t3 t4 t2 t2 t3 t4

:drawtra
	(
	cursor =? ( rojo )( blanco )
	@+ dup $f and $c <? )(
		2 << 'ltra + @ exec
		) 3drop ;


|---------- punto en poligono
#inside

:dline | p1 p2 --
	2dup gc>xy op gc>xy line ;

:entre | p1 p2 --
|	dline
	d>xy rot d>xy  | x1 y1 x2 y2
	pick2 <? ( 2swap )
	yf pick3 pick2 between -? ( 4drop drop ; ) drop
	pick2 - swap pick3 -	| x1 y1 y2-y1 x2-x1
	rot yf swap - *			| x1 (y2-1) (x2-x1)*(yf-y1)
	rot xf swap - rot *		| (x2-x1)*(yf-y1) (xf-x1)*(y2-1)
	>? ( 1 'inside +! ) drop ;

:t0 drop ;
:t1 drop 4+ ;
:t4 po -1 =? ( drop dup 'pa ! 'po ! ; )
	over dup 'pa ! 'po ! entre ;
:t5 pa over 'pa ! entre ;
:t6 swap @+ dup pa entre
	rot dup 'pa ! entre ;
:t7 swap @+ swap @+ | n3 n2 adr n1
	dup pa entre 	| n3 n2 adr n1
	rot dup rot entre |	n3 a n2
	rot dup 'pa ! entre ;

#ppo t0 t0 t1 t1 t4 t5 t6 t7 t4 t5 t6 t7

:train? | adr -- 1/0
	0 'inside !
	-1 'po !
	( @+ dup $f and $b <? )(
		2 << 'ppo + @ exec
		) 3drop
	inside 1 and ;


|-------
:inmouse | x y -- 1/0
	xymouse rot - dup * rot rot - dup * +
	32 <=? ( 1 )( 0 ) nip ;

:dotf | x1 y1 --
	yfix 3 >> 'yf ! xfix 3 >> 'xf ! ;

:indot | x y -- 1/0
	yf - dup * swap xf - dup * +
	32 <=? ( 1 )( 0 ) nip ;

:in? | xm ym xM yM -- 0/1
	rot yf rot rot between -? ( 3drop 0 ; ) drop
	xf swap rot between -? ( drop 0 ; ) drop
	1 ;

:intr
	( tra> <? )( 4+ >r
		r@+ r@+ d>xy rot d>xy
|		in? 1? ( drop r> 12 - tra - 4 >> ; ) drop
		in? 1? ( drop r 12 - @ train? 1? ( drop r> 12 - tra - 4 >> ; ) ) drop
		r> 4+ ) drop
	-1 ;

:intra | x1 y1 -- tra
	dotf tra intr ;

:innext | tra -- tra'
	4 << tra + intr ;

:searchtra
	intra -? ( ; )
	( dup 1+ innext 0 >? )( nip ) drop ;

:2sort | x y -- max min
	over >? ( swap ) ;

|---------------------
:vistall
	sw dup 2/ 'xv !
	sh dup 2/ 'yv !
	min 64 - 'sv ! ;

|----------------------------------
:inid
	xymouse xy>gc 8 or lin !+ 0 over ! 'lin> !
	;
:movd
	xymouse xy>gc 9 or lin> !+ 0 over ! 'lin> !
	;
:upd
	0 'lin> !
	;

|--------
:cursor0
	xca -? ( drop ; ) yca op xymouse line ;

:cursor0c
	gris
	xca yca op xymouse line ;

:cursor1
	xymouse line ;


:cursor2
	xymouse lin> 4 - @ gc>xy curve
	gris
	xca yca op
	lin> 4 - @ gc>xy 2dup line
	3 fdiam
	;

:cursor3
	xca yca
	xymouse
	pick3 dup pick3 - +
	pick3 dup pick3 - +
	xca yca 2over curve
	gris
	2dup 3 fdiam 2over 3 fdiam
	op line line
	;

:cursor4
	xymouse
	lin> 4 - @ gc>xy curve
	gris
	lin> 12 - >r
	r@+ gc>xy 2dup op
	r@+ gc>xy 2dup line 3 fdiam
	op r> @ gc>xy 2dup line 3 fdiam
	;

:cursor4c
	xymouse
	lin> 4 - @ gc>xy curve
	gris
	lin> 12 - >r
	r@+ gc>xy 2dup op
	r> 4+ @ gc>xy 2dup line 3 fdiam 3 fdiam
	;

:cursor5
	xca yca
	xymouse
	pick3 dup pick3 - +
	pick3 dup pick3 - +
	xca yca 2over lin> 4 - @ gc>xy curve3
	gris
	2dup 3 fdiam 2over 3 fdiam
	op line line
	;

#ecursor 'cursor0
#emodo 0

:ins0
	xymouse xy>gc 4 or lin> !+ 'lin> !
	'cursor1 'ecursor ! ;

:ins0c
	xymouse xy>gc
	xca yca xy>gc 4 or
	lin> !+ !+ 'lin> !
	'cursor2 'ecursor ! ;

:ins1
	xymouse xy>gc 5 or lin> !+ 'lin> !
	'cursor1 'ecursor ! ;

:conv2c
	lin> 4 - dup @
	xymouse xy>gc 6 or
	rot !+ !+ 'lin> ! ;

:ins2
	conv2c 'cursor1 'ecursor ! ;

:ins3
	xca yca
	xymouse
	pick3 dup pick3 - +
	pick3 dup pick3 - +
	xy>gc rot rot xy>gc
	2swap xy>gc 6 or
	lin> >r r!+
	swap r!+ r!+ r> 'lin> !
	'cursor4 'ecursor !
	;

:ins4
    lin> 4 - >r
	r @ |$fffffff0 and
	xymouse xy>gc 6 or r!+
	r!+ r> 'lin> !
	'cursor1 'ecursor !
	;

:ins4c
    lin> 4 - >r
	r @ |$fffffff0 and
	xymouse xy>gc 6 or r!+
	r!+ r> 'lin> !
	'cursor1 'ecursor !
	;

:ins5
	lin> 4 - >r
	r @ |$fffffff0 and

	xca yca
	xymouse
	pick3 dup pick3 - +
	pick3 dup pick3 - +
	xy>gc rot rot xy>gc		| nc mou
	2swap xy>gc 7 or		| nc mou ca
	r!+ swap r!+ swap r!+
	r!+ r> 'lin> !

    'cursor4c 'ecursor !
	;

:t0 drop ;
:t1 drop 4+ ;
:to gc>xy op ;
:t2 gc>xy line ;
:t3 swap >r gc>xy r@+ gc>xy curve r> ;
:t4 swap >r gc>xy r@+ gc>xy r@+ gc>xy curve3 r> ;

#ltra t0 t0 t1 t1 to t2 t3 t4 to t2 t3 t4

:closep
	| la ultima curva(curda?)
	ecursor
	'cursor4 =? ( ins4 )
	'cursor4c =? ( ins4c )
	drop
   	ves> >r
	lin ( lin> <? )( @+ r!+ ) drop
	color 8 << $c or r!+
	0 r ! r> 'ves> !
	buildtra
	-1 'picktra !
	'cursor0 'ecursor !
	-1 'xca !
	;

:drawdraw
	lin lin> =? ( drop ecursor exec ; )
	gris
	( lin> <? )(
		@+ dup $f and 2 << 'ltra + @ exec
		) drop

	rojo
	ecursor exec

	lin @ gc>xy
	2dup inmouse 1? ( rojo 'closep guiBtn )( verde ) drop
	3 fbox
	;

|----
:inip
	xymouse 'yca ! 'xca !
	0 'emodo ! ;

:movp1
	xymouse yca - abs swap xca - abs or
	4 <? ( drop ; ) drop
	1 'emodo !
	ecursor
	'cursor0 =? ( drop 'cursor0c 'ecursor ! ; )
	'cursor1 =? ( drop 'cursor3 'ecursor ! ; )
	'cursor2 =? ( drop conv2c 'cursor1 'ecursor ! ; )

	'cursor3 =? ( drop 'cursor4 'ecursor ! ; )
	'cursor4 =? ( drop 'cursor5 'ecursor ! ; )
	'cursor4c =? ( drop 'cursor5 'ecursor ! ; )
	drop
	;

:movp
	emodo 0? ( drop movp1 ; ) drop ;

:upp
	ecursor
	'cursor0 =? ( drop ins0 ; )
	'cursor0c =? ( drop ins0c ; )
	'cursor1 =? ( drop ins1 ; )
	'cursor2 =? ( drop ins2 ; )
	'cursor3 =? ( drop ins3 ; )
	'cursor4 =? ( drop ins4 ; )
	'cursor4c =? ( drop ins4c ; )
	'cursor5 =? ( drop ins5 ; )
	drop
	;


:mododraw
|	'inid 'movd 'upd guiMap		| dibujo directo
	'inip 'movp 'upp guiMap
	drawdraw
	;

|----------------------------------
:modovista
	[ xymouse 'yf ! 'xf ! ; ]
	[ xymouse dup yf - 'yv +! 'yf ! dup xf - 'xv +! 'xf ! ;	] guiDnMove
	;

|---------------------------------
:tocanodo | x y -- nro/0
	xymouse 'yf ! 'xf !
	picktra 4 << tra + @
	( @+ dup $f and $b <? )( drop
		gc>xy indot 1? ( drop 4 - ; )
		drop ) 3drop 0 ;

:muevenodo | cursor --
	xymouse xy>gc over @ $f and or swap ! ;

:modoeditne
	[ xymouse searchtra 'picktra ! ; ] guiBtn ;

:cursor!
	'cursor !
	;

:modoeditn
	picktra -? ( drop modoeditne ; )
	[ tocanodo 0? ( -1 'picktra ! ) cursor! ; ]
	[ cursor 1? ( muevenodo ; ) drop ; ]
	guiDnMove
	4 << tra + @ drawtra ;

|---------------------------------
:rebox
	picktra rebuild1tra
	picktra 4 << tra + 4+
	@+ gc>xy 'ymin ! 'xmin !
	@ gc>xy 'ymax ! 'xmax !
	;


:movepoly
	xymouse
	yfix 3 >> dup yf - 'yfa ! 'yf !
	xfix 3 >> dup xf - 'xfa ! 'xf !

	picktra 4 << tra + 4+	| limites
	@+ d>xy
	yfa + -$1fff <? ( 3drop ; ) drop
	xfa + -$1fff <? ( 2drop ; ) drop
	@+ d>xy
	yfa + $1fff >? ( 3drop ; ) drop
	xfa + $1fff >? ( 2drop ; ) drop

	12 - dup @				| mueve poly
	( dup @ dup $f and $b <? )(
		swap d>xy
		yfa + swap xfa + swap
		xy>d or swap !+
		) 3drop

	4+						| mueve limites
	dup @ d>xy yfa + swap xfa + swap xy>d swap !+
	dup @ d>xy yfa + swap xfa + swap xy>d swap !+
	8 -
	@+ gc>xy 'ymin ! 'xmin !
	@ gc>xy 'ymax ! 'xmax !
	;


:escalapoly
	picktra 4 << tra + @
	( dup @ dup $f and $b <? )(
		swap d>xy
		yca - ysa *. yca + swap
		xca - xsa *. xca + swap
		xy>d or swap !+
		) 3drop ;

:rotapoly
	;

:delpoly
	picktra 4 << tra + @
	dup lastnode ves>	| ini end last
	over -
	over pick3 - neg 'ves> +!
	2 >> 1+ move 				| des src cnt
	0 ves> !
	buildtra -1 'picktra ! ;

:cpypoly
	ves> picktra 4 << tra + @
	dup lastnode over -			| last ini cnt
	dup 'ves> +!
	2 >> move
	0 ves> !
	buildtra -1 'picktra ! ;

|--- scratch pad
:.pad
	lin 'lin> ! ;

:cpy>pad | adr --
	lin> >r
	( @+ dup $f and $b <? )( drop
		r!+ ) drop
	r!+ drop
	r> 'lin> ! ;

:cpypad> | adr --
	>r lin
	( lin> <? )( @+ r!+ ) drop
	rdrop ;

|---

:uppoly
	picktra tra> tra - 4 >> 1- >=? ( drop ; )
	.pad
	4 << tra +
	dup @ swap 16 + @	| p1 p2
	cpy>pad
	dup cpy>pad
	cpypad>
	buildtra -1 'picktra !
	;

:dnpoly
	picktra 0? ( drop ; )
	.pad
	4 << tra +
	dup @ cpy>pad
	16 - @ dup cpy>pad
	cpypad>
	buildtra -1 'picktra !
	;

|----------------------------------
:inpoly | -- 1/0
	xymouse
	ymin ymax between -? ( 2drop 0 ; ) drop
	xmin xmax between -? ( drop 0 ; ) drop
	picktra 4 << tra + @ train? ;

:moveini
	inpoly 0? ( 1- 'picktra ! ; ) drop
	xymouse dotf ;


:polyini
	picktra 4 << tra + @+
	cpy>pad
	ymax ymin - 'hpa !
	xmax xmin - 'wpa !
	xymouse dotf
	;

:searchpoly
    xymouse searchtra dup 'picktra !
    -? ( drop ; )
    4 << tra + 4+
	@+ gc>xy 'ymin ! 'xmin !
	@ gc>xy 'ymax ! 'xmax !
	;

:mvscala
	xymouse
	yfix 3 >> dup yf - 'yfa ! 'yf !
	xfix 3 >> dup xf - 'xfa ! 'xf !

	picktra 4 << tra + 4+
	@+ d>xy 2dup 'yca ! 'xca !
	rot @ d>xy 		| minx miny maxx maxy
	rot - dup yfa + 16 << swap / 'ysa !
	swap - dup xfa + 16 << swap / 'xsa !

	escalapoly
	rebox
	;

:mvscalax
	xymouse
	yfix 3 >> dup yf - 'yfa ! 'yf !
	xfix 3 >> dup xf - 'xfa ! 'xf !

	picktra 4 << tra + 4+	| limites
	@+ d>xy 2dup 'yca ! 'xca !
	rot @ d>xy 		| minx miny maxx maxy
	rot 2drop 1.0 'ysa !
	swap - dup xfa + 16 << swap / 'xsa !

	escalapoly
    rebox
	;

:mvscalay
	xymouse
	yfix 3 >> dup yf - 'yfa ! 'yf !
	xfix 3 >> dup xf - 'xfa ! 'xf !

	picktra 4 << tra + 4+
	@+ d>xy 2dup 'yca ! 'xca !
	rot @ d>xy 		| minx miny maxx maxy
	rot - dup yfa + 16 << swap / 'ysa !
	swap - 2drop 1.0 'xsa !

	escalapoly
    rebox
	;

:rotapoly
	;

#emove

:dnp
	xmin xmax + 2/ ymax | punto de x escala
	inmouse 1? ( drop polyini 'mvscalay 'emove ! ; ) drop
	xmax ymin ymax + 2/ | punto de y escala
	inmouse 1? ( drop polyini 'mvscalax 'emove ! ; ) drop
	xmax ymax | punto de xy escala
	inmouse 1? ( drop polyini 'mvscala 'emove ! ; ) drop
	xmin ymin | punto de rotar
	inmouse 1? ( drop polyini 'rotapoly 'emove ! ; ) drop
	moveini 'movepoly 'emove ! | mover
	;

:modoeditp
	picktra -? ( drop 'searchpoly guiBtn ; ) drop
	xmin ymin xmax ymax	dotbox
	negro
	xmin xmax + 2/ ymin ymax + 2/ 5 cruz
	verde
	xmin ymin p2
	blanco
	xmax ymax p1
	xmax ymin ymax + 2/ p1
	xmin xmax + 2/ ymax p1
	'dnp emove guiDnMove
	;

|------------------------------------
:btnric | icon vec --
	ink@ >r btne blanco 2-gc drawric 2+gc r> ink ;

|------------------------------------
:toodraw
	'i.pencil 0 btnric gcdn
	'i.link 0 btnric
	;

:toovista
	'i.zoom_in [ sv 2* 'sv ! ; ] btnric gcdn
	'i.zoom_out [ sv 2/ 'sv ! ; ] btnric gcdn
	'i.resize_full 'vistall btnric gcdn
	;

:tooeditn
	picktra -? ( drop ; ) drop
	'i.trash 'delpoly btnric gcdn
	'i.copy 'cpypoly btnric gcdn
	;

:tooeditp
	picktra -? ( drop ; ) drop
	'i.trash 'delpoly btnric gcdn
	'i.copy 'cpypoly btnric gcdn
	'i.circle_arrow_up 'uppoly btnric gcdn
	'i.circle_arrow_down 'dnpoly btnric gcdn
	;


|------- modos
#modos 'mododraw 'modovista 'modoeditp  'modoeditn
#tools 'toodraw 'toovista 'tooeditp 'tooeditn

|----- botonera
#modogui 'mododraw
#modotoo 'toodraw

:setmodo
	dup 'modo ! dup 2 <<
	dup 'modos + @ 'modogui !
	'tools + @ 'modotoo ! ;

:botonmodo | icon nro --
	modo =? ( azul )( negro )
	'setmodo btne
	modo =? ( blanco )( gris )
	drop 8-gc drawric 8+gc gcdn ;

:drawves
	xv yv pos sv qdim
	blanco gc.fbox
	ves vesprite ;

:botonera
	scr home fonti
	azul 2 linesfill blanco cr2
	dup ":r%d VesEditor " printc

   	32 qdim 18 18 pos
	rojo 'exit dup >esc< btne blanco 'i.off drawric gcdn
	'i.pencil 0 botonmodo
	'i.eye_open 1 botonmodo
	'i.star 2 botonmodo
	'i.star_empty 3 botonmodo

|	'i.magic 4 botonmodo
|	gcdn
	verde oscuro
|	'i.undo 0 btnric gcdn
|	'i.repeat 0 btnric gcdn gcdn

    modotoo exec

	sw 26 - 26 pos
	'color btncol
	;

:teclado
	[ sv 5 >> neg 'yv +! ; ] <up>
	[ sv 5 >> 'yv +! ; ] <dn>
	[ sv 5 >> 'xv +! ; ] <ri>
	[ sv 5 >> neg 'xv +! ; ] <le>
	[ sv 2* 'sv ! ; ] <pgup>
	[ sv 2/ 'sv ! ; ] <pgdn>
	;

|-------- DEBUG
:tr1
	picktra -? ( drop ; )
	4 << tra + @ dup lastnode >r =? ( ">" print ) r> =? ( "<" print )
	;

:dumptr
	scr home negro

|	ves ( ves> 4+ <=? )(
|		tr1
|		ves> =? ( "!" print )
|		tra =? ( "*" print )
|		@+ "%h " print cr allowchome
|		) drop
	lin ( lin> <? )(
		@+ "%h " print cr allowchome
		) drop
verde fonti2
	ecursor
	'cursor0 =? ( "0" print )
	'cursor0c =? ( "0c" print )
	'cursor1 =? ( "1" print )
	'cursor2 =? ( "2" print )
	'cursor3 =? ( "3" print )
	'cursor4 =? ( "4" print )
	'cursor4c =? ( "4c" print )
	'cursor5 =? ( "5" print )
	drop
	;
|-------- DEBUG

:main
	buildtra
	4
	show clrscr
		drawves
		modogui exec
        botonera
        teclado

		dumptr |-------- DEBUG

		'exit >esc<
		cminiflecha ;

|--- symplify poly
:lef	| last equal first
	;
:cef	| control point equal first
	;
:cel	| control point equal last
	;
:pil	| point in line
	;

:t0 ;

:t4	| OP
	po pick2 'po !
	-1 =? ( drop  ; )
	|lef
	;
:t5 | LINE
	| pil
	;
:t6 | CURVE
	| cef
	;

:t7	| CURVE3
	| cef cel
	;
:tc ;

#ts t0 t0 t0 t0 t4 t5 t6 t7 t4 t5 t6 t7 tc tc tc tc


:simplify
	-1 'po !
	ves dup ( @+ 1? )(
		dup $f and 2 << 'ts + @ exec
		rot !+ swap ) 3drop ;

:vmem
	mark
	here dup 'ves ! dup 'ves> ! 0 swap !
	vistall
	;

: $aaaaaa paper
	vmem
	ves "mem/notepad.vsp" load 0 swap !
|	simplify
	ves ( @+ 1? )( drop ) swap 4 - 'ves> !
	main
	ves ves> over - "mem/notepad.vsp" save ;
