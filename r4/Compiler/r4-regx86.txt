| registros para x86
| PHREDA 2017
|--------------------------------
^r4/lib/gui.txt
^r4/lib/print.txt
^r4/lib/trace.txt

^r4/compiler/r4-cellana.txt

|-------- constantes del sistema
#syscons "XRES" "YRES" "FREE_MEM" "SYSFRAME" "XFB"
"SYSPAPER" "SYSXYM" "SYSBM" "SYSKEY" | []

#sysregs "eax" "ebx" "ecx" "edx" "edi" "esi" "ebp"
#sysregw "ax" "bx" "cx" "dx" "di" "si" "bp"
#sysregb "al" "bl" "cl" "dl" "*" "*" "*"

|------ Celda de la pila
| $0 nro
| $1 cte
| $2 str
| $3 cod
| $4 dat
| $5 reg
| $10 mem
| $20 4*
| $40 +
|-------- tipos de celdas
#cellt )( 1024	| tipo
#cellv )( 1024	| valor
#cella )( 1024  | suma

:value	over 2 << 'cellv + @ ;
:suma	over 2 << 'cella + @ ;

|---- imprime celda
:list2str swap ( 1? )( 1- swap >>0 swap ) drop ;

:mt0 value "$%h" ,print ;			|--	0 nro 	33
:mt1 value 'syscons list2str ,s ;	|--	1 cte	XRES
:mt2 value "str%h" ,print ;			|--	2 str   "hola"
:mt3 value "w%h" ,print ;			|--	3 cod  'func		4 dat  'var
:mt5 value 'sysregs list2str ,s ;	|-- 8 reg 	eax

#tiposrm mt0 mt1 mt2 mt3 mt3 mt5 0 0 0

:,reg | nro --
	'sysregs list2str ,s ;

:,cell | nro -- nro
	dup 2 << 'cellt + @
	$10 and? ( "dword [" ,s )
	dup $7 and 2 << 'tiposrm + @ exec
	$20 and? ( "*" ,s dup ,d )
	$40 and? ( +? ( "+" ,s ) dup ,d )
	$10 and? ( "]" ,s )
	drop ;

:mt5b value 'sysregb list2str ,s ;
#tiposrmb mt0 mt1 mt2 mt3 mt3 mt5b 0 0 0

:,cellb | nro -- nro
	dup 2 << 'cellt + @
	$10 and? ( "byte [" ,s )
	dup $7 and 2 << 'tiposrmb + @ exec
	$20 and? ( "*" ,s dup ,d )
	$40 and? ( suma +? ( "+" ,s )  ,d )
	$10 and? ( "]" ,s )
	drop ;

:mt5w value 'sysregw list2str ,s ;
#tiposrmw mt0 mt1 mt2 mt3 mt3 mt5w 0 0 0

:,cellw | nro -- nro
	dup 2 << 'cellt + @
	$10 and? ( "word [" ,s )
	dup $7 and 2 << 'tiposrmw + @ exec
	$20 and? ( "*" ,s dup ,d )
	$40 and? ( +? ( "+" ,s ) dup ,d )
	$10 and? ( "]" ,s )
	drop ;

|-----------------
:cell.ini | nro --
	2 <<
	0 over 'cellt + !
	0 over 'cellv + !
	0 swap 'cella + ! ;

:cell.t | val type nro --
	2 <<
	swap over 'cellt + !
	swap over 'cellv + !
	0 swap 'cella + ! ;

:cell.val 0 swap cell.t ;
:cell.cte 1 swap cell.t ;
:cell.str 2 swap cell.t ;
:cell.wor 3 swap cell.t ;
:cell.reg 5 swap cell.t ;

:cell.ch? | nro -- 1/0
	2 << 'cellt + @ $f0 and ;

:cell.add | val nro --
	2 <<
	swap over 'cella + +!
	'cellt + dup @ $40 or swap !
	;



:needreg | nro --
	dup cellflag
	$4 and? ( drop ; )	| entrada palabra
	$8 and? ( drop ; )	| salida palabra
	$1000 and? ( drop ; )	| eax
	$2000 and? ( drop ; )	| ecx
	drop ;
	;

::iniciaregistros
	cntvreg ( 1? )( 1-
		needreg
		) drop

	0 ( cntvreg 1- <? )(
		dup cell.ini
		1+ ) drop
	;

|-----------------
:dumpcel
	mark
	0 ( cntvreg <? )(
		dup ,d ,sp ,cell ,cr
		1+ ) drop
	0 ,c
	empty
	here print ;

::,dumpcel
	0 ( cntvreg <? )(
		dup ,d ,sp ,cell ,cr
		1+ ) drop ;


|--- token a cte
:c7 tok>cte "$%h"  ;
:cB 8 >> "str%h" ;
:cC 8 >> "w%h" ;

#codeisa 0 0 0 0 0 0 0 c7 c7 c7 c7 cB cC cC cC cC

::tokencte | a -- mem
	dup $ff and 2 << 'codeisa + @ 0? ( trace 2drop ; ) exec ;

:registro
	cellreg
	1- ,cell | registro virtual
	drop ;

::emitcell | cell --
	dup cellreg? 1? ( drop registro ; ) drop
	celltok
	256 <? ( registro ; ) |,sp "copia" ,s ,d ; ) | copia
	@ tokencte ,print
	;

::cellvalue? | cell -- token/0
	celltok
	256 <? ( ; ) | copia
	@ dup $ff and
	7 10 between +? ( drop ; )
	2drop 0 ;

|---test
:main
	1 'cntvreg !
	33
	show clrscr
		dup "%d - " print
		cntvreg "%d cells" print cr

		dumpcel

		[ 1 'cntvreg +! ; ] <up>
		[ cntvreg 1- 1 clampmin 'cntvreg ! ; ] <dn>
		[ cntvreg 1- cell.ini ; ] <f1>
		[ 0 cntvreg 1- cell.reg ; ] <f2>
		[ 33 cntvreg 1- cell.val ; ] <f3>
		[ 3 cntvreg 1- cell.str ; ] <f4>
		[ 3 cntvreg 1- cell.wor ; ] <f5>
		[ 3 cntvreg 1- cell.cte ; ] <f6>
 		[ 1 cntvreg 1- cell.add ; ] <f7>

		'exit >esc<
		cminiflecha ;

: mark main ;