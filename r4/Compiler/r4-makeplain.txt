
|-- nombre a nro
|:tok>dicn 8 >> "w%h" mprint ;							| w<nro palabra>
:tok>dicn 8 >> dup 4 << 'indicepal + @ "%w_%h" mprint ;	| nombre<nro palabra>

|----------------
:cpycad | adr --
	( c@+ 1? )( 34 =? ( dup ,c ) ,c ) 2drop ;

:coldefw ":" ,s tok>dicn dup c@ $3a =? ( 2drop ; ) drop ,s ;
:coldefv "#" ,s tok>dicn ,s ;
:colit	tok>cte "$%h" ,print ;
:colits	34 ,c tok>mem cpycad 34 ,c ;

:colwor
:colvar
	tok>dicn ,s ;
:coldwo
:coldva
	"'" ,s tok>dicn ,s ;

#codei 0 coldefw coldefw coldefv coldefv 0 0 colit colit colit colit colits colwor colvar coldwo coldva

::nro>macro | n -- s
	16 - macroname ;

:,tokenp | n t --
	16 <? ( 2 << 'codei + @ exec ; ) nip
	nro>macro ,s ;

|--- Variables
:esvariable | nro --
	dup dic>inf @
	$4 nand? ( drop ; ) drop | constante
	| dup dup dic>str @ "#%w%h" ,print
	"#" ,s dup 8 << tok>dicn ,s
	dup dic>tok @ 4+
	( @+ dup $ff and
		5 <? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		,sp
		16 <? ( 2 << 'codei + @ exec )( nip nro>macro ,s )
		)
	3drop ,cr ;

|--- Accion
#nroanon 0

#totoken
#niva	| nivel de anonimas

#niv )( 1024
#niv> 'niv
:+niv	niv> c!+ 'niv> ! ;
:-niv   'niv 'niv> ! ;

#anonind )( 256
#anonind> 'anonind
:+ind 	anonind> !+ 'anonind> ! ;
:-ind	'anonind 'anonind> ! ;

#anons )( 128
#anons> 'anons
:>aa anons> !+ 'anons> ! ;
:aa> -4 'anons> +! anons> @ ;
:-aa 'anons 'anons> ! ;
:aa# anons> 'anons - 2 >> ;

#buffaux )( 8192
#buffaux> 'buffaux
:+buff	buffaux> !+ 'buffaux> ! ;
:-buff	'buffaux 'buffaux> ! ;

:es[
	1 'niva +!
	niv> +ind
	nroanon dup >aa
	8 << 20 or pick2 4 - ! | graba en token
	1 'nroanon +!
	;
:es]
	-1 'niva +!
	aa> 8 << 21 or pick2 4 - ! | graba en token
	;

:everyword | adr rtoken -- adr
	20 =? ( es[ )
	21 =? ( es] )
	drop
	niva +niv
	;

:marcaniveles | nro --
	-aa -niv -ind
	0 'niva !
	dup dic>tok @ dup 'totoken  !
	swap dic>len@
	( 1? )( 1-
		swap @+ $ff and
		everyword
		swap ) 2drop
	-1 niv> c! ;

:genCTE
	,cte 8 << 7 or ;

|------------------------
:buscacte
	dup 8 >> dic>inf @
	$4 and? ( drop +buff ; ) drop
	8 >> dic>tok @  | token de variable

	4+ @ dup $ff and
	5 <? ( 2drop 0 genCTE +buff ; ) | caso #cte #var
	| 11 =? () | #v "hola"
	12 =? ( 14 nip ) 14 =? ( drop $fffffff0 and 14 or +buff ; ) | caso #cte 'word
	13 =? ( 15 nip ) 15 =? ( drop $fffffff0 and 15 or +buff ; ) | caso #cte 'var
	drop

	tok>cte genCTE	| caso #cte 4
	+buff ;

|------------------------
:buscainline
	dup 8 >> dic>inf @
	$100 nand? ( drop +buff ; ) drop
	8 >>
	dup dic>tok @ 4+	| no copia nombre
	swap dic>len@ 2 -	| no copia fin
	( 1? )( 1- swap @+
		dup $ff and
		12 =? ( drop buscainline )(
			13 =? ( drop buscacte )(
				drop +buff ) )
		swap ) 2drop ;


|--- optimiza
:aa1@ | adr+ -- adr- a
	4 - dup dup 4+ buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> ;

:aa2@ | adr+ -- adr- a b
	8 - dup dup 8 + buffaux> over - 2 >> move | d s c
	-8 'buffaux> +!
	aa> aa> swap ;

:aa3@ | adr+ -- adr- a b c
	12 - dup dup 12 + buffaux> over - 2 >> move | d s c
	-12 'buffaux> +!
	aa> aa> aa> rot rot swap ;

:aa1! | adr- v -- adr-
	dup >aa genCTE over 4 - ! ;

:aa2@! | adr+ -- adr- a b
	4 - dup dup 4 + buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> aa> swap ;

:aa2! | adr- a b -- adr-
	swap dup >aa genCTE pick2 8 - !
	dup >aa genCTE over 4 - ! ;


:oAND	| ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ AND aa1! ;
:oOR    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ OR aa1! ;
:oXOR   | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ XOR aa1! ;
:oNOT   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ NOT aa1! ;
:o+		| ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ + aa1! ;
:o-     | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ - aa1! ;

:cteop! | adr+ v2 v1 -- adr+
	pick2 8 - !+ ! -aa ;

:buff!+ | val adr -- adr+
	dup 4+ over buffaux> over - 2 >> move>
	!+
	4 'buffaux> +! ;


|----- multiplicacion a shift (menos de 4 "1")
:*cte
	2drop ;
|	dup cntpop 3 >? ( 2drop ; )
|	( 0? )( ) drop ;

| 8 * --> 3 <<
:*pot
	aa> dup 1- and? ( *cte ; )
	$4b | <<
	31 rot clz - genCTE
	cteop! ;

:o*     | ab -- c
	aa#
	1 >? ( 2drop aa2@ * aa1! ; )
	1 =? ( 2drop *pot -aa ; )
	2drop -aa ;

|----- division by constant
| http://www.flounder.com/multiplicative_inverse.htm

#ad		| d absoluto
#t #anc #p
#q1 #r1
#q2 #r2

#divm	| magic mult
#divs   | shift mult

:calcstep
	1 'p +!
	q1 2* 'q1 ! r1 2* 'r1 !
	r1 anc >=? ( 1 'q1 +! anc neg 'r1 +! ) drop
	q2 2* 'q2 ! r2 2* 'r2 !
	r2 ad >=? ( 1 'q2 +! ad neg 'r2 +! ) drop
	;

:calcmagic | d --
	dup abs 'ad !
    $80000000 over 31 0>> + 't !
    t dup 1- swap ad mod - 'anc !
    31 'p !
    $80000000 anc / abs 'q1 !
    $80000000 q1 anc * - abs 'r1 !
	$80000000 ad / abs 'q2 !
	$80000000 q2 ad * - abs 'r2 !
	( calcstep
		ad r2 -	| delta
		q1 =? ( r1 0? ( swap 1+ swap ) drop )
		q1 >? )( drop ) drop
	q2 1+
	swap -? ( drop neg )( drop )
	'divm ! p 'divs ! ;

|--- ajuste por signo
:signadj!+ | adr -- adr+
	$23 swap buff!+ 		| dup
	31 genCTE swap buff!+ 	| 31
	$4c swap buff!+ 		| >>
	$3a swap buff!+ 		| -
	;

|-----------------------------
|---- cte / --> divm divs *>> dup 31 >> -
:/cte
	calcmagic
	divs genCTE divm genCTE cteop! | sobreescribe
	$3e swap buff!+ 		| *>>
	signadj!+ ;

|----  2 / --> dup 31 >> + 2/
:/cte2
	drop
	31 genCTE $23 cteop! | dup 31
	$4d swap buff!+ | 0>>
	$39	swap buff!+	| +
	$49	swap buff!+	| 2/
	;

|----  4 / --> dup 31 >> 30 0>> + 2 >>
:/pot
	aa> dup 1- and? ( /cte ; )
	2 =? ( /cte2 ; )
	swap
	31 genCTE $23 cteop!
	$4c swap buff!+ | >>
	33 32 pick3 clz - - genCTE swap buff!+ |30
	$4d swap buff!+ | 0>>
	$39	swap buff!+	| +
	31 rot clz - genCTE swap buff!+	| 2
	$4c swap buff!+ | >>
	;

:o/     | ab -- c
	aa#
	1 >? ( 2drop aa2@ / aa1! ; )
	1 =? ( 2drop /pot -aa ; )
	2drop -aa ;

|-----------------------------
:o*/    | abc -- d
	aa#
	2 >? ( 2drop aa3@ */ aa1! ; )
	2drop -aa ;

:o*>>   | abc -- d
	aa#
	2 >? ( 2drop aa3@ *>> aa1! ; )
	2drop -aa ;

|-----------------------------
:/modcte
	;

|----  8 /mod --> dup / swap mod
:/modpot
	aa> dup 1- and? ( drop ; )
	swap
    $23 $23 cteop!
    31 genCTE swap buff!+ | 31
	$4c swap buff!+ | >>
	33 32 pick3 clz - - genCTE swap buff!+ |30
	$4d swap buff!+ | 0>>
	$39	swap buff!+	| +
	31 pick2 clz - genCTE swap buff!+	| 2
	$4c swap buff!+ | >>
	$29	swap buff!+	| swap
	$23 swap buff!+ | dup
	31 genCTE swap buff!+ |31
	$4c swap buff!+ | >>
	33 32 pick3 clz - - genCTE swap buff!+
	$4d swap buff!+	| 0>>
	$29	swap buff!+	| swap
	$25	swap buff!+	| over
	$39	swap buff!+	| +
	swap 1- genCTE swap buff!+ | mask
	$35 swap buff!+	| AND
	$29	swap buff!+	| swap
	$3A	swap buff!+	| -
	;

:o/MOD  | ab -- cd
	aa#
	1 >? ( 2drop aa2@! /MOD aa2! ; )
	1 =? ( 2drop /modpot -aa ; )
	2drop -aa ;

|------- MOD
:modcte
	dup >r
	calcmagic
	divm genCTE $23 cteop!
	divs genCTE swap buff!+
	$3e swap buff!+ 		| *>>
	signadj!+
	r> genCTE swap buff!+	| NRO
	$3B	swap buff!+	| *
	$3A	swap buff!+	| -
	;

|----  8 mod --> $7 and
|	dup 31 >> (33-4)29 0>> swap over + 7 and swap -
:modpot
	aa> dup 1- and? ( modcte ; )
	swap 31 genCTE $23 cteop! | dup 31
	$4c swap buff!+ | >>
	33 32 pick3 clz - - genCTE swap buff!+
	$4d swap buff!+	| 0>>
	$29	swap buff!+	| swap
	$25	swap buff!+	| over
	$39	swap buff!+	| +
	swap 1- genCTE swap buff!+ | mask
	$35 swap buff!+	| AND
	$29	swap buff!+	| swap
	$3A	swap buff!+	| -
	;

:oMOD   | ab -- c
	aa#
	1 >? ( 2drop aa2@ MOD aa1! ; )
	1 =? ( 2drop modpot -aa ; )
	2drop -aa ;

:oABS   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ ABS aa1! ;
:oSQRT	| a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ SQRT aa1! ;
:oCLZ	| a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ CLZ aa1! ;
:o<</	| abc -- d
	aa# 3 <? ( 2drop -aa ; ) 2drop aa3@ <</ aa1! ;
:oNEG   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ NEG aa1! ;
:o1+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 1+ aa1! ;
:o4+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 4+ aa1! ;
:o1-    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 1- aa1! ;
:o2/    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 2/ aa1! ;
:o2*    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 2* aa1! ;
:o<<    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ << aa1! ;
:o>>    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ >> aa1! ;
:o0>>    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ 0>> aa1! ;

#optim oAND	oOR oXOR oNOT o+ o- o* o/ o*/ o*>> o/MOD oMOD oABS oSQRT oCLZ o<</ oNEG o1+ o4+ o1- o2/ o2* o<< o>> o0>>

:optN | adr+ val tok -- adr+
	$35 - 2 << 'optim + @ exec ;

:addN | adr+ val tok -- adr+
	drop tok>cte >aa ;

:untoken | adr+ val tok -- adr+
|	2dup ,tokenp ,cr |....
	7 >=? ( 10 <=? ( addN ; ) )		| numero
	$35 >=? ( $4d <=? ( optN ; ) )	| operacion
	2drop -aa ;

|--- imprime de buffer
:buffp
	20 =? ( drop 8 >> ":_aa%h " ,print ; )
	21 =? ( drop 8 >> "'_aa%h " ,print ; )
	,tokenp ,sp ;

:+buffer | adr -- adr++
	@+ dup $ff and
	12 =? ( drop buscainline ; )
	13 =? ( drop buscacte ; )
	drop +buff ;

#datacp	| marca para reutilizar constantes

|--- copy y genera
:copynivl | lugarniv --
	dup 'niv - 2 << totoken + | niv tok
	over c@
:copynivr | lugarniv tok v
	-buff
	datacp 'data> ! | reutilizar constantes

	swap rot | niv@ tok niv
	( c@+ pick3 >=? )( | mismo nivel o mayor
		pick3 >? ( drop swap 4+ )( drop swap +buffer )
		swap ) 4drop

	|--- optimiza buffer
	'buffaux ( buffaux> <? )(
		@+ dup $ff and untoken
		) drop

	|--- descarga buffer
	'buffaux ( buffaux> <? )(
		@+ dup $ff and
		buffp ) drop
	,cr ;

|-------------------
:escodigo | nro --
	dup dic>inf @
	$100 and? ( drop ; )
	drop | inline

	dup 1- dic>inf @
	$81 and $80 =? ( drop ; ) | ya definido
	drop

	dup marcaniveles

	|-- generar anonimos
	anonind> ( 'anonind >? )( 4 -
		dup @ copynivl
		) drop

	|-- genera principal
	'niv totoken 0 copynivr
	;

:gencodigo | nro --
	dup dic>call@ 0? ( drop ; ) drop
	dup dic>inf @
	1 and? ( drop esvariable ; )
	drop escodigo ;

|------------------------------------
::makeplain
	0 'nroanon !
	data> 'datacp !
	mark
	"| r4com4 :" ,s 'ed.nombre ,s ,cr
	cntwords "| all w:%d " ,print
	cntuwords cntuvars " used v:%d w:%d " ,print ,cr
	cnttokens "| tokens:%d" ,print ,cr
	"|-------" ,s ,cr
	0 ( cntwords <? )( gencodigo 1+ ) drop
	"r4/compiler/plain.txt" savemem
	empty
	;
