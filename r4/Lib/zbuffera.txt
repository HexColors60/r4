| zbuffer - convex polyfill
| z-color
| PHREDA 2017
|-------------------------
^r4/lib/trace.txt

#:zb
#zbw #zbh
#zcnt

#segs	| mem polys
#divt	| tabla de reciproco divisores de 1..xmax
#px #py #pz
#ymin #ymax
#zstep
#zbase

#o #z

::zo! 'o ! ;
::zz! 'z ! ;

|--- maskbuffer | zbw*zbh
:zb.adr | x y -- d
	zbw * + 3 << zb + ;

::zb@ | x y -- b
	zb.adr @ ;

::zb! | x y z --
	rot rot zb.adr !+ o swap ! ;

::zbw! | x y z w --
	swap 'z !
	rot rot zb.adr >a | w
	( 1? )(
		a@+
		z >? ( z a> 4 - ! o a!+ )( 4 a+ )
		drop 1- ) drop ;

::zbh! | x y z h --
	swap 'z !
	rot rot zb.adr >a
	zbw 1- 3 << swap
	( 1? )(
		a@+
		z >? ( z a> 4 - ! o a!+ )( 4 a+ )
		drop
		over a+ 1- ) 2drop ;

::zb.clear
	zb >a zcnt ( 1? )( 1- $7fffffff a!+ 4 a+ ) drop ;

::zb.ini | w h --
	2dup * dup 'zcnt !	| max puntos
	here dup 'zb ! 		| zbuffer+cbuffer
	swap 3 << +
	dup 'segs !			| segmentos zbh
	over 4 << +
	dup 'divt !			| reciproco zbw
	pick2 2 << +
	'here !
	dup 1- 'ymax ! 'zbh ! 'zbw !
	divt >a 0 a!+	| division por reciproca
	1 ( zbw <? )( 1.0 over / a!+ 1+ ) drop 
	zb.clear
	;

:/r | n d -- r
	2 << divt + @ 16 *>> ;

::zb.occ | w h x y z -- 1/0
	'z !
	zb.adr >a
	zbw pick2 - 5 <<
	swap ( 1? )(
		pick2 ( 1? )( a@+
			z >? ( nip 4drop 1 ; )
			drop 4 a+ 1- ) drop
		over a+
		1- ) 3drop
	0 ;

::zb.set | w h x y z o --
	'o ! 'z !
	zb.adr >a
	zbw pick2 - 5 <<
	swap ( 1? )(
		pick2 ( 1? )( a@+
			z >? ( z a> 4 - ! o a!+ )( 4 a+ )
			drop 1- ) drop
		over a+
		1- ) 3drop
	;

::zb.fill | w h x y --
	zb.adr >a
	zbw pick2 - 5 <<
	swap ( 1? )(
		pick2 ( 1? )( a@+
			z >? ( z a> 4 - ! o a!+ )( 4 a+ )
			drop 1- ) drop
		over a+
		1- ) 3drop
	;

|--- convex polygon
#FBASE	16
#vert )( 32
#vert> 'vert

::zop | x y z --
	'zbase ! 0 'pz !
	ymin 4 << segs + >a
	ymax ymin - 1+ ( 1? )( 1- $7fffffff a!+ -1 a!+ 8 a+ ) drop 
	dup 'ymin ! dup 'ymax !
	over FBASE << dup pick2 4 << segs +
	!+ !+ 0 dup rot !+ !
	'py ! 'px !
	'vert 'vert> !
	;

:enlinea | x y --
	4 << segs + dup vert> !+ 'vert> !
	>a dup FBASE <<
	a@+ <? ( dup a> 4 - ! pz a> 4+ ! )
	a@+ >? ( dup a> 4 - ! pz a> 4+ ! )
	drop 
	'px ! ;

::zline | x y z --
	pz 'z !
	zbase - 11 << 'pz !
	py =? ( enlinea ; )
	px py
	2over 'py !	'px !
	pick2 >? ( 2swap z pz dup 'z ! - )( pz z - ) 'zstep !
	ymin <? ( dup 'ymin ! )
 	rot ymax >? ( dup 'ymax ! )		| comprueba el mayor
	>r >r FBASE << swap FBASE << 	| x1 x2
	over - r> r> over -				| x1 (x2-x1) y1 (y2-y1)
	rot over /r 					| x1 y1 (y2-y1) t
	rot 4 << segs + dup >a
	vert> !+ 'vert> !				| x1 (y2-y1) t
	zstep pick2 /r 'zstep !
	rot $8000 + rot				| t x1 cnt
	1+ ( 1? )( 1- swap
		a@+ <? ( dup a> 4 - ! z a> 4+ ! )
		a@+ >? ( dup a> 4 - ! z a> 4+ ! )
		8 a+
		zstep 'z +!
		pick2 + swap )
	3drop ;

:zbline | cnt x zi --
	swap 3 << py + >a
	swap ( 1? )(
		over 11 >> zbase +
		a@+ <? ( a> 4 - ! o a!+ )( drop 4 a+ )
		swap zstep + swap
		1- ) 2drop ;

::zpoly | --
	'vert @+
	@+ swap @+ rot - 'px ! 'zstep !
	( vert> <? )( @+
		@+ swap @+ rot - px >? ( 'px ! 'zstep ! )( 2drop )
		) drop
	zstep @+ swap @ swap - px FBASE >> 1+ /r 'zstep !
	ymax ymin
	dup 4 << segs + >b
   	dup zbw * 3 << zb + 'py !
	( over <=? )(
		b@+ FBASE >> b@+ FBASE >> over - 1+
		swap b@+ 4 b+
		zbline
		zbw 3 << 'py +!
		1+ ) 2drop ;

