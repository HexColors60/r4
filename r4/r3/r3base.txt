| r3 base words
| PHREDA 1018
|-------------
^r4/lib/trace.txt

^./r3parse.txt
^./r3stack.txt

#:r3filename )( 256
#:r3path )( 256

#:cnttokens
#:cntdef

#:error
#:modo

|---- includes
| 'string|'mem
#:inc )( $fff
#:inc> 'inc

|---------  #src
|...source
|---------	#code
|...token	#<<boot
|...		#code>
|---------	#data
| data...	#data>

#:src
#:code
#:code>
#:<<boot
#:data
#:data>

|---- dicc
| str|token|info|mov  	16 bytes/word
| 0   4     8    12

| info
| $1 - code/data
| $2 - loc/ext
| $fff000 - calls

| mov
| $fffff000 -- 20 bits token len

#:dicc
#:dicc>
#:dicc<

#r3machine
"nop" ":" "::" "#" "##" "|" "^" 	| 6
"" "" "" "" "str" 					| 11
"call" "var" "dcode" "ddata" 		| 15
";" "jmp" "jmpw" "[" "]"

#r3base
";" "(" ")" "[" "]"
"EX" "0?" "1?" "+?" "-?" 				| 10
"<?" ">?" "=?" ">=?" "<=?" "<>?" "AN?" "NA?" "BTW?" 		| 19
"DUP" "DROP" "OVER" "PICK2" "PICK3" "PICK4" "SWAP" "NIP" 	| 27
"ROT" "2DUP" "2DROP" "3DROP" "4DROP" "2OVER" "2SWAP" 		| 34
">R" "R>" "R@" 												| 37
"AND" "OR" "XOR" "NOT" "NEG" 								| 42
"+" "-" "*" "/" "*/" 										| 47
"/MOD" "MOD" "ABS" "SQRT" "CLZ" 							| 52
"<<" ">>" ">>>" "*>>" "<</" 								| 57
"@" "C@" "Q@" "@+" "C@+" "Q@+"  							| 65
"!" "C!" "Q!" "!+" "C!+" "Q!+"  							| 71
"+!" "C+!" "Q+!"  											| 74
">A" "A>" "A@" "A!" "A+" "A@+" "A!+" 						| 81
">B" "B>" "B@" "B!" "B+" "B@+" "B!+" 						| 88
"MOVE" "MOVE>" "FILL" 										| 91
"CMOVE" "CMOVE>" "CFILL" 									| 94
"DMOVE" "DMOVE>" "DFILL" 									| 97
"SYSCALL" "SYSMEM" 											| 99
( 0 )

::r3basename | nro -- str
	'r3base swap
	( 0 <>? )( 1- swap >>0 swap ) drop ;

::?base | adr -- nro/-1
	0 'r3base			| adr 0 'r3base
	( dup c@ 1? )( drop
		pick2 over =s 1? ( 2drop nip ; ) drop
		>>0 swap 1+ swap ) 4drop
	-1 ;

::allocdic | cnt --
	4 << here
	dup 'dicc ! dup 'dicc> ! dup 'dicc< !
	+ 'here ! ;

::adr>dic | adr -- nro
	dicc - 4 >> ;

::dic>adr | nro -- adr
	4 << dicc + ;

::dic>tok | nro -- 'inf
	dic>adr 4 + ;

::dic>inf | nro -- 'inf
	dic>adr 8 + ;

::dic>len@
	dic>adr 12 + @ 12 0>> ;

::dic>toklen | nro -- adr len
	dic>adr 4+ @+ swap 4+ @ 12 0>> ;

::?word | str -- str dir / str 0
	dicc> 16 -	|---largo
	( dicc >=? )(
		dup @						| str ind pal
		pick2
		=s 0? ( drop )( drop
			dup 8 + @
			%10 and? ( drop ; )( drop dicc< >=? ( ; ) )
			)
		16 - ) drop
	0 ;

::word!+ | info info mem name --
	dicc> >a
	a!+ a!+ a!+ a!+
	a> 'dicc> ! ;

::wordnow | -- now
	dicc> dicc - 4 >> ;


::debugdicc
	dicc ( dicc> <? )( dup >a
		a@+ a@+ a@+ a@+ 2swap swap
		"%w %h %h %h" slog
		16 +
		) drop ;
