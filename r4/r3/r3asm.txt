| VM r3
| PHREDA 2018
|-------------
^./r3base.txt

#lab

:,cell
	"(%d)" ,print ;

:,stack | adr --
	c@+ $30 -
	GETDSTACK
	,cell
	;

::,asm | str --
	( c@+ 1? )(
		$23 <>? ( ,c )( drop ,stack )
		) 2drop
	,cr
	;

|----------------------------------------
#niv )( 1024
#niv> 'niv
#nniv 0

:level+
	nniv niv> !+ 'niv> ! 1 'nniv +! ;
:level-
	-4 'niv> +! ;
:nlevel	| -- nl
	niv> 4 - @ $ffffff and 	;
:wlevel	| -- wl
	niv> 4 - @ 24 >> ;

:getcte
	;
:strmem
	0
	;

|----------------------

:g0 :g: :g:: :g# :g: :g| :g^    ;

:gdec
	dup 16 << 23 >> .PUSHD 8 0>> ;

:ghex
	7 0>> .PUSHD 0 ;

:gbin
	7 0>> neg .PUSHD 0 ;

:gfix
	7 0>> getcte .PUSHD 0 ;

:gstr
	7 0>> .PUSHD 0 ;

:gwor
	.PUSHD
	;

:gvar
	.PUSHD
	;

:gdwor
	"call #w" ,asm
	;

:gdvar
	.PUSHD
	;


:next(
	;

:i; 							| 10
	2drop .popIP 0 ;

:g;
	"ret" ,ln
	;

|--- IF
:g(
	level+
	nlevel "_li%h:" ,ln
	;

:g)
	wlevel 1? ( nlevel "jmp _li%h" ,ln ) drop
	nlevel "_lo%h:" ,ln
	level-
	;
|--- REP
:g[
:g]
	;

:gEX
	"call #0" ,asm
|	"jmp #0" ,asm
	;

:g0?
	next(
	"or #0,#0" ,asm
	nlevel "jnz _lo%h" ,ln
	;

:g1?
	next(
	"or #0,#0" ,asm
	nlevel "jz _lo%h" ,ln
	;

:g+?
	next(
	"or #0,#0" ,asm
	nlevel "js _lo%h" ,ln
	;

:g-?
	next(
	"or #0,#0" ,asm
	nlevel "jns _lo%h" ,ln
	;

:g<?
	next(
	"cmp #1,#0" ,asm
	nlevel "jge _lo%h" ,ln
	;

:g>?
	next(
	"cmp #1,#0" ,asm
	nlevel "jle _lo%h" ,ln
	;

:g=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jne _lo%h" ,ln
	;

:g>=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jl _lo%h" ,ln
	;

:g<=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jg _lo%h" ,ln
	;

:g<>?
	next(
	"cmp #1,#0" ,asm
	nlevel "je _lo%h" ,ln
	;

:gA?
	next(
	"test #1,#0" ,asm
	nlevel "jnz _lo%h" ,ln
	;

:gN?
	next(
	"test #1,#0" ,asm
	nlevel "jz _lo%h" ,ln
	;

:gB?
	next(
	| sub nos2,nos
	| cmp nos,tos-nos
	"cmp #2,#1" ,asm
	nlevel "jge _lo%h" ,ln
	;


:g>R
	"push #0" ,asm 
	.drop ;
:gR>
	.dup
	"pop #0" ,asm ;
:gR@
	.dup
	"mov #0,[rSP]" ,asm ;
:gAND
	"and #1,#0" ,asm
	.drop ;
:gOR
	"or #1,#0" ,asm
	.drop ;
:gXOR
	"xor #1,#0" ,asm
	.drop ;
:gNOT
	"not #0" ,asm ;
:gNEG
	"neg #0" ,asm ;
:g+
	"add #1,#0" ,asm
	.drop ;
:g-
	"sub #1,#0" ,asm
	.drop ;
:g*
	"imul #1,#0" ,asm
	.drop ;
:g/
	"cdq;idiv #1,#0" ,asm
	.drop ;
:g*/
	"cdq;imul #1;idiv #0" ,asm
	.2drop ;
:g/MOD
	"cdq;idiv #0" ,asm ;
:gMOD
	"cdq;idiv #0" ,asm
	.drop ;
:gABS
	"mov rdx,#0;sar rdx,63;add #0,rdx;xor #0,rdx" ,asm ;
:gSQRT
	;
:gCLZ
	"bsr #0,#0;xor #0,63" ,asm ;
:g<<
	"shl #1,#0" ,asm
	.drop ;
:g>>
	"sar #1,#0" ,asm
	.drop ;
:g>>>
	"shr #1,#0" ,asm
	.drop ;
:g*>>
	"cdq;imul #1;shrd rax,rdx,#b0;sar rdx,#b0;test #b0,64;cmovne rax,rdx" ,asm
	.2drop ;
:g<</
	"cdq;shld rdx,rax,#b0;shl rax,#b0;idiv #1" ,asm
	.2drop ;
:g@
	.dup
	"movsx #0,dword [#0]" ,asm ;
:gC@
	.dup
	"movsx #0,byte [#0]" ,asm ;
:gD@
	.dup
	"mov #0,[#0]" ,asm ;
:g@+
	.dup
	"movsx #0,dword [#1];add #1,4" ,asm ;
:gC@+
	.dup
	"movsx #0,byte [#1];add #1,1" ,asm  ;
:gD@+
	.dup
	"mov #0,[#1];add #1,8" ,asm	;
:g!
	"mov [#0],#1" ,asm
	.2drop ;
:gC!
	"mov byte [#0],#1" ,asm
	.2drop ;
:gD!
	"mov dword [#0],#1" ,asm
	.2drop ;
:g!+
	"mov dword [#0],#1;add #0,4" ,asm
	.drop ;
:gC!+
	"mov byte [#0],#1;add #0,1" ,asm
	.drop ;
:gD!+
	"mov [#0],#1;add #0,8" ,asm
	.drop ;
:g+!
	"add dword [#0],#1" ,asm
	.drop ;
:gC+!
	"add byte [#0],#1" ,asm
	.drop ;
:gD+!
	"add [#0],#1" ,asm
	.drop ;
:g>A
	"mov rsi,#0" ,asm
	.drop ;
:gA>
	"mov #0,rsi" ,asm ;
:gA@
	"mov #0,[rsi]" ,asm	;
:gA!
	"mov [rsi],#0" ,asm
	.drop ;
:gA+
	"add rsi,#0" ,asm
	.drop ;
:gA@+
	"mov #0,[rsi];add rsi,8" ,asm ;
:gA!+
	"mov [rsi],#0;add rsi,8" ,asm
	.drop ;
:g>B
	"mov rdi,#0" ,asm
	.drop ;
:gB>
	"mov #0,rdi" ,asm ;
:gB@
	"mov #0,[rdi]" ,asm ;
:gB!
	"mov [rdi],#0" ,asm
	.drop ;
:gB+
	"add rdi,#0" ,asm
	.drop ;
:gB@+
	"mov #0,[rdi];add rdi,8" ,asm ;
:gB!+
	"mov [rdi],#0;add rdi,8" ,asm
	.drop ;
:gMOVE
	"rep movsq" ,asm ;
:gMOVE>
	"lea rsi,[rsi+rcx*8-8];lea rdi,[rdi+rcx*8-8];std;rep movsq;cld" ,asm ;
:gFILL
	"rep stosq" ,asm ;
:gCMOVE
	"rep movsb" ,asm ;
:gCMOVE>
	"lea rsi,[rsi+rcx-1];lea rdi,[rdi+rcx-1];std;rep movsb;cld" ,asm ;
:gCFILL
	"rep stosb" ,asm ;
:gDMOVE
	"rep movsd" ,asm ;
:gDMOVE>
	"lea rsi,[rsi+rcx*4-4];lea rdi,[rdi+rcx*4-4];std;rep movsd;cld" ,asm ;
:gDFILL
	"rep stosd" ,asm ;
:gSYSCALL
	;
:gSYSMEM
	;

#vmc
g0 g: g:: g# g: g| g^		| 0 1 2 3 4 5 6
gdec ghex gbin gfix gstr    | 7 8 9 a b
gwor gvar gdwor gdvar		| c d e f
g; g( g) g[ g] gEX			| 10..15
g0? g1? g+? g-? g<? g>? g=? g>=? g<=? g<>? gA? gN? gB?	| 16..22
.DUP .DROP .OVER .PICK2 .PICK3 .PICK4 .SWAP .NIP		| 23..2A
.ROT .2DUP .2DROP .3DROP .4DROP .2OVER .2SWAP			| 2B..31
g>R gR> gR@                                             | 32..34
gAND gOR gXOR gNOT gNEG									| 35..39
g+ g- g* g/ g*/                                         | 3A..3E
g/MOD gMOD gABS gSQRT gCLZ
g<< g>> g>>> g*>> g<</
g@ gC@ gD@ g@+ gC@+ gD@+
g! gC! gD! g!+ gC!+ gD!+
g+! gC+! gD+!
g>A gA> gA@ gA! gA+ gA@+ gA!+
g>B gB> gB@ gB! gB+ gB@+ gB!+
gMOVE gMOVE> gFILL
gCMOVE gCMOVE> gCFILL
gDMOVE gDMOVE> gDFILL
gSYSCALL gSYSMEM

::cgstep
	$7f and 2 << 'vmc + @ exec ;

