| VM r3
| PHREDA 2018
|-------------
^./r3base.txt
^./r3stack.txt

|--- @@
:getval | -- v
	dup 4 - @ 8 0>> ;

:getiw | v -- v iw
    dup 3 << blok + @ $10000000 and ;

:getcte | -- v
	dup 4 - @ 8 0>> src +

	dup ?numero 1? ( drop nip nip ; ) drop
	?fnumero 1? ( drop nip ; ) drop
	"error" slog
	;

|----------------------
:g0 :g: :g:: :g# :g: :g| :g^    ;

:gdec
	getcte push.nro ;

:ghex
	getcte push.nro ;

:gbin
	getcte neg push.nro ;

:gfix
	getcte push.nro ;

:gstr
	getval push.str ;

:gvar
	getval push.wrd ;

:gdwor
	getval push.wrd	;

:gdvar
	getval push.wrd	;

:gwor
	getval "call w%h" ,print ,cr
	| "jmp w%h" ,print ,cr	| tail call
	;


:g;
	| tail call
	"ret" ,ln
	;

|--- IF
:g(
	getval
	getiw 0? ( 2drop ; ) drop
	"_i%h:" ,print ,cr ;		| while

:g)
	getval
	getiw 1? ( over "jmp _i%h" ,print ,cr ) drop	| while
	"_o%h:" ,print ,cr
	;

|--- REP
:g[
:g]
	;

:gEX
	"call #0" ,asm
|	"jmp #0" ,asm
	;

:g0?
	"or #0,#0" ,asm
	getval "jnz _o%h" ,print ,cr
	;

:g1?
	"or #0,#0" ,asm
	getval "jz _o%h" ,print ,cr
	;

:g+?
	"or #0,#0" ,asm
	getval "js _o%h" ,print ,cr
	;

:g-?
	"or #0,#0" ,asm
	getval "jns _o%h" ,print ,cr
	;

:g<?
	"cmp #1,#0" ,asm
	getval "jge _o%h" ,print ,cr
	;

:g>?
	"cmp #1,#0" ,asm
	getval "jle _o%h" ,print ,cr
	;

:g=?
	"cmp #1,#0" ,asm
	getval "jne _o%h" ,print ,cr
	;

:g>=?
	"cmp #1,#0" ,asm
	getval "jl _o%h" ,print ,cr
	;

:g<=?
	"cmp #1,#0" ,asm
	getval "jg _o%h" ,print ,cr
	;

:g<>?
	"cmp #1,#0" ,asm
	getval "je _o%h" ,print ,cr
	;

:gA?
	"test #1,#0" ,asm
	getval "jnz _o%h" ,print ,cr
	;

:gN?
	"test #1,#0" ,asm
	getval "jz _o%h" ,print ,cr
	;

:gB?
	| sub nos2,nos
	| cmp nos,tos-nos
	"cmp #2,#1" ,asm
	getval "jge _o%h" ,print ,cr
	;


:g>R
	"push #0" ,asm
	.drop ;
:gR>
	.dup
	"pop #0" ,asm ;
:gR@
	.dup
	"mov #0,[rSP]" ,asm ;

:gAND
	nro2stk 0? ( drop .AND ; ) drop
	"and #1,#0" ,asm
	.drop ;
:gOR
	nro2stk 0? ( drop .OR ; ) drop
	"or #1,#0" ,asm
	.drop ;
:gXOR
	nro2stk 0? ( drop .XOR ; ) drop
	"xor #1,#0" ,asm
	.drop ;
:gNOT
	nro1stk 0? ( drop .NOT ; ) drop
	"not #0" ,asm ;
:gNEG
	nro1stk 0? ( drop .NEG ; ) drop
	"neg #0" ,asm ;
:g+
	nro2stk 0? ( drop .+ ; ) drop
	"add #1,#0" ,asm
	.drop ;
:g-
	nro2stk 0? ( drop .- ; ) drop
	"sub #1,#0" ,asm
	.drop ;
:g*
	nro2stk 0? ( drop .* ; ) drop
	"imul #1,#0" ,asm
	.drop ;
:g/
	nro2stk 0? ( drop ./ ; ) drop
	"cdq;idiv #1,#0" ,asm
	.drop ;
:g*/
	nro3stk 0? ( drop .*/ ; ) drop
	"cdq;imul #1;idiv #0" ,asm
	.2drop ;
:g/MOD
	nro2stk 0? ( drop ./MOD ; ) drop
	"cdq;idiv #0" ,asm ;
:gMOD
	nro2stk 0? ( drop .MOD ; ) drop
	"cdq;idiv #0" ,asm
	.drop ;
:gABS
	nro1stk 0? ( drop .ABS ; ) drop
	"mov edx,#0;sar edx,63;add #0,edx;xor #0,edx" ,asm ;
:gSQRT
	nro1stk 0? ( drop .SQRT ; ) drop
	"call sqrt" ,asm
	;
:gCLZ
	nro1stk 0? ( drop .CLZ ; ) drop
	"bsr #0,#0;xor #0,63" ,asm ;
:g<<
	nro2stk 0? ( drop .<< ; ) drop
	"shl #1,#0" ,asm
	.drop ;
:g>>
	nro2stk 0? ( drop .>> ; ) drop
	"sar #1,#0" ,asm
	.drop ;
:g>>>
	nro2stk 0? ( drop .>>> ; ) drop
	"shr #1,#0" ,asm
	.drop ;
:g*>>
	nro3stk 0? ( drop .*>> ; ) drop
	"cdq;imul #1;shrd eax,edx,$0;sar edx,$0;test $0,32;cmovne eax,edx" ,asm
	.2drop ;
:g<</
	nro3stk 0? ( drop .<</ ; ) drop
	"cdq;shld edx,eax,$0;shl eax,$0;idiv #1" ,asm
	.2drop ;

:g@
	"movsx #0,dword [#0]" ,asm ;
:gC@
	"movsx #0,byte [#0]" ,asm ;
:gD@
	"mov #0,[#0]" ,asm ;

:g@+
	.dup
	"movsx #0,dword [#1];add #1,4" ,asm ;
:gC@+
	.dup
	"movsx #0,byte [#1];add #1,1" ,asm  ;
:gD@+
	.dup
	"mov #0,[#1];add #1,8" ,asm	;

:g!
	"mov [#0],#1" ,asm
	.2drop ;
:gC!
	"mov byte [#0],#1" ,asm
	.2drop ;
:gD!
	"mov dword [#0],#1" ,asm
	.2drop ;

:g!+
	"mov dword [#0],#1;add #0,4" ,asm
	.drop ;
:gC!+
	"mov byte [#0],#1;add #0,1" ,asm
	.drop ;
:gD!+
	"mov [#0],#1;add #0,8" ,asm
	.drop ;

:g+!
	"add dword [#0],#1" ,asm
	.2drop ;
:gC+!
	"add byte [#0],#1" ,asm
	.2drop ;
:gD+!
	"add [#0],#1" ,asm
	.2drop ;

:g>A
	"mov esi,#0" ,asm
	.drop ;
:gA>
	"mov #0,esi" ,asm ;
:gA@
	"mov #0,[esi]" ,asm	;
:gA!
	"mov [esi],#0" ,asm
	.drop ;
:gA+
	"add esi,#0" ,asm
	.drop ;
:gA@+
	"mov #0,[esi];add esi,4" ,asm ;
:gA!+
	"mov [esi],#0;add esi,4" ,asm
	.drop ;

:g>B
	"mov edi,#0" ,asm
	.drop ;
:gB>
	"mov #0,edi" ,asm ;
:gB@
	"mov #0,[edi]" ,asm ;
:gB!
	"mov [edi],#0" ,asm
	.drop ;
:gB+
	"add edi,#0" ,asm
	.drop ;
:gB@+
	"mov #0,[edi];add edi,4" ,asm ;
:gB!+
	"mov [edi],#0;add edi,4" ,asm
	.drop ;

:gMOVE
	"rep movsq" ,asm ;
:gMOVE>
	"lea esi,[esi+ecx*4-4];lea edi,[edi+ecx*4-4];std;rep movsd;cld" ,asm ;
:gFILL
	"rep stosq" ,asm ;
:gCMOVE
	"rep movsb" ,asm ;
:gCMOVE>
	"lea esi,[esi+ecx-1];lea edi,[edi+ecx-1];std;rep movsb;cld" ,asm ;
:gCFILL
	"rep stosb" ,asm ;
:gDMOVE
	"rep movsd" ,asm ;
:gDMOVE>
	"lea rsi,[esi+ecx*4-4];lea edi,[edi+ecx*4-4];std;rep movsd;cld" ,asm ;
:gDFILL
	"rep stosd" ,asm ;

:gSYSCALL
	;
:gSYSMEM
	;

|---- opt instruction
:g@* | *248 reg -- val
	"mov #0,dword [#0*#1]" ,asm ;
	.drop
	;
:g@*+ | val *248 reg -- val
	"mov #0,dword [#0*#1+#2]" ,asm ;
	.2drop
	;
:g*+ | val *248 reg -- val
	"lea #0,dword [#0*#1+#2]" ,asm ;
	.2drop
	;

|----

#vmc
g0 g: g:: g# g: g| g^		| 0 1 2 3 4 5 6
gdec ghex gbin gfix gstr    | 7 8 9 a b
gwor gvar gdwor gdvar		| c d e f
g; g( g) g[ g] gEX			| 10..15
g0? g1? g+? g-? g<? g>? g=? g>=? g<=? g<>? gA? gN? gB?	| 16..22
.DUP .DROP .OVER .PICK2 .PICK3 .PICK4 .SWAP .NIP		| 23..2A
.ROT .2DUP .2DROP .3DROP .4DROP .2OVER .2SWAP			| 2B..31
g>R gR> gR@                                             | 32..34
gAND gOR gXOR gNOT gNEG									| 35..39
g+ g- g* g/ g*/                                         | 3A..3E
g/MOD gMOD gABS gSQRT gCLZ
g<< g>> g>>> g*>> g<</
g@ gC@ gD@ g@+ gC@+ gD@+
g! gC! gD! g!+ gC!+ gD!+
g+! gC+! gD+!
g>A gA> gA@ gA! gA+ gA@+ gA!+
g>B gB> gB@ gB! gB+ gB@+ gB!+
gMOVE gMOVE> gFILL
gCMOVE gCMOVE> gCFILL
gDMOVE gDMOVE> gDFILL
gSYSCALL gSYSMEM

::codestep | token --
	$ff and
	dup r3tokenname slog
	2 << 'vmc + @ exec ;

