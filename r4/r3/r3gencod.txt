| r3-gencode
| PHREDA 2018
|
^./r3base.txt
^./r3asm.txt


#:ncell 0	| cnt cells
| Info de celdas
| RR WW FFFF
| R cnt de lecturas
| W cnt de escrituras
| flags........
|  $1 in W		| word
|  $2 out W
|  $4 in C		| call
|  $8 out C
| $10 var
| $20 dir var
| $40 dir code
| $80 copia de A en cellt
| $100 celda exec
| $800 celda ya asignada (para vreg)
| $1000 celda AD	x86
| $2000 celda C		x86
| $4000 no usar C
#:cells )( 1024
#:cellt )( 1024 | token de origen o celda
#:cellv )( 1024 | vida de celda | ff iii fff

:newcell | -- nro
	ncell
	0 over 2 << 'cells + !
	0 over 2 << 'cellt + !
	ncode over 2 << 'cellv + ! | inicio de vida
	dup 1+ 'ncell !
	;

:setcell | nro -- nro
	0 over 2 << 'cells + !
	0 over 2 << 'cellt + !
	ncode over 2 << 'cellv + ! | inicio de vida
	;

:endlive | nro --
	ncode 10 << swap 2 << 'cellv + +!  ;

|----- division by constant
| http://www.flounder.com/multiplicative_inverse.htm

#ad		| d absoluto
#t #anc #p
#q1 #r1
#q2 #r2

#divm	| magic mult
#divs   | shift mult

:calcstep
	1 'p +!
	q1 2* 'q1 ! r1 2* 'r1 !
	r1 anc >=? ( 1 'q1 +! anc neg 'r1 +! ) drop
	q2 2* 'q2 ! r2 2* 'r2 !
	r2 ad >=? ( 1 'q2 +! ad neg 'r2 +! ) drop
	;

:calcmagic | d --
	dup abs 'ad !
    $80000000 over 31 0>> + 't !
    t dup 1- swap ad mod - 'anc !
    31 'p !
    $80000000 anc / abs 'q1 !
    $80000000 q1 anc * - abs 'r1 !
	$80000000 ad / abs 'q2 !
	$80000000 q2 ad * - abs 'r2 !
	( calcstep
		ad r2 -	| delta
		q1 =? ( r1 0? ( swap 1+ swap ) drop )
		q1 >? )( drop ) drop
	q2 1+
	swap -? ( drop neg )( drop )
	'divm ! p 'divs ! ;

|--- ajuste por signo
:signadj!+ | --
	$23 code!+ 	| dup
	31 cte!+ 	| 31
	$4c code!+ 	| >>
	$3a code!+ 	| -
	;

|-----------------------------
|---- cte / --> divm divs *>> dup 31 >> -
:/cte
	calcmagic
	divs cte!+
	divm cte!+
	$3e code!+ 		| *>>
	signadj!+ ;

|----  2 / --> dup 31 >> + 2/
:/cte2
	$23 code!+ | dup 31
	31 cte!+
	$4d code!+ | 0>>
	$39	code!+ | +
	$49	code!+ | 2/
	;

|----  4 / --> dup 31 >> 30 0>> + 2 >>
:/pot
	aa> dup 1- and? ( /cte ; )
	2 =? ( /cte2 ; )
	swap
	31 cte!+ 
	$23 code!+
	$4c code!+ | >>
	33 32 pick3 clz - - cte!+ |30
	$4d code!+ | 0>>
	$39	code!+	| +
	31 rot clz - cte!+ | 2
	$4c code!+ | >>
	;

:o/     | ab -- c
	aa#
	1 >? ( 2drop aa2@ / aa1! ; )
	1 =? ( 2drop /pot -aa ; )
	2drop -aa ;


|-----------------------------
:/modcte
	dup >r
	calcmagic
	divm cte!+
	$23 code!+
	divs cte!+
	$3e  code!+ 		| *>>
	signadj!+

	$29	code!+	| swap
	$25	code!+	| over

	r> cte!+	| NRO
	$3B	code!+	| *
	$3A	code!+	| -
	;

|----  8 /mod --> dup / swap mod
:/modpot
	aa> dup 1- and? ( /modcte ; )
	swap
    $23 code!+
	$23 code!+
    31 cte!+ | 31
	$4c code!+ | >>
	33 32 pick3 clz - - cte!+ |30
	$4d code!+ | 0>>
	$39	code!+	| +
	31 pick2 clz - cte!+ 	| 2
	$4c code!+ | >>
	$29	code!+	| swap
	$23 code!+ | dup
	31 cte!+ |31
	$4c code!+ | >>
	33 32 pick3 clz - - cte!+
	$4d code!+	| 0>>
	$29	code!+	| swap
	$25	code!+	| over
	$39	code!+	| +
	1- cte!+  | mask
	$35 code!+	| AND
	$29	code!+	| swap
	$3A	code!+	| -
	;

:o/MOD  | ab -- cd
	aa#
	1 >? ( 2drop aa2@! /MOD aa2! ; )
	1 =? ( 2drop /modpot -aa ; )
	2drop -aa ;

|------- MOD
:modcte
	dup >r
	calcmagic
	divm cte!+
	$23 code!+
	divs cte!+
	$3e code!+ 		| *>>
	signadj!+
	r> cte!+	| NRO
	$3B	code!+	| *
	$3A	code!+	| -
	;

|----  8 mod --> $7 and
|	dup 31 >> (33-4)29 0>> swap over + 7 and swap -
:modpot
	aa> dup 1- and? ( modcte ; )
	31 cte!+
	$23 code!+ | dup 31
	$4c code!+ | >>
	33 32 pick3 clz - - cte!+
	$4d code!+	| 0>>
	$29	code!+	| swap
	$25	code!+	| over
	$39	code!+	| +
	1- cte!+ | mask
	$35 code!+	| AND
	$29	code!+	| swap
	$3A	code!+	| -
	;

:oMOD   | ab -- c
	aa#
	1 >? ( 2drop aa2@ MOD aa1! ; )
	1 =? ( 2drop modpot -aa ; )
	2drop -aa ;

|-----------------------------------

:idec | --
	newcell PUSH.REG ;
:istr | --
	newcell PUSH.REG ;
:ivar | --
	newcell PUSH.REG ;
:idwor	| --
	newcell PUSH.REG ;
:idvar	| --
	newcell PUSH.REG ;

:iwor
	dup 4 - @ 8 >>

	dup dic>DATAU
	dup ( 1? )( 1- tosoutC d.dropv ) drop
	swap dic>DATAD +
	( 1? )( 1- newcell d.push tosinC ) drop
	;

:iex
	tosExe
    tos+1r d.dropv
	lastdircode
	dup dic>DATAU
	dup ( 1? )( 1- tosoutC d.dropv ) drop
	swap dic>DATAD +
	( 1? )( 1- newcell d.push tosinC ) drop
	;

#vmc
0 0 0 0 0 0 0		| 0 1 2 3 4 5 6

idec idec idec idec istr    | 7 8 9 a b
iwor ivar idwor idvar		| c d e f

i; i( i) i[ i] iEX			| 10..15

i0? i1? i+? i-? i<? i>? i=? i>=? i<=? i<>? iA? iN? iB?	| 16..22

.DUP .DROP .OVER .PICK2 .PICK3 .PICK4 .SWAP .NIP		| 23..2A
.ROT .2DUP .2DROP .3DROP .4DROP .2OVER .2SWAP			| 2B..31

i>R iR> iR@                                             | 32..34

iAND iOR iXOR iNOT iNEi									| 35..39
i+ i- i* i/ i*/                                         | 3A..3E
i/MOD iMOD iABS iSQRT iCLZ
i<< i>> i>>> i*>> i<</

i@ iC@ iD@ i@+ iC@+ iD@+
i! iC! iD! i!+ iC!+ iD!+
i+! iC+! iD+!

i>A iA> iA@ iA! iA+ iA@+ iA!+
i>B iB> iB@ iB! iB+ iB@+ iB!+

iMOVE iMOVE> iFILL
iCMOVE iCMOVE> iCFILL
iDMOVE iDMOVE> iDFILL
iSYSCALL iSYSMEM

|------------------------------------------

w;		| ; | fin de palabra
w( w) 0 0						| [ ]
exexec					|EXEC  x/0 --    TOS es dcod
c0 c0 c0 c0				| 0?	a -- a
c1 c1 c1 c1 c1 c1 c1 c1	c1 | =?	ab -- a


r.push	|>R		a -- R: -- a
r.pop	|R>		-- a R: a --
r.r@	|R		-- a R: a -- a

op2a1	|AND	ab -- c
op2a1	|OR		ab -- c
op2a1	|XOR	ab -- c
op1a1	|NOT	a -- b
op2a1	|+		ab -- c
op2a1	|-		ab -- c
op2a1	|*		ab -- c
vop2a1	|/		ab -- c		; AD
op3a1	|*/		abc -- d	; AD
vop3a1	|*>>	abc -- d	; ADC
op2a2	|/MOD	ab -- cd	; AD
vop2a1	|MOD	ab -- c		; AD
vop1a1	|ABS	a -- b
op1a1	|SQRT	a -- b
vop1a1	|CLZ	a -- b
vop3a1	|<</	abc -- d	; ADC
op1a1	|NEG	a -- b
op1a1	|1+		a -- b
op1a1	|4+		a -- b
op1a1	|1-		a -- b
op1a1	|2/		a -- b
op1a1	|2*		a -- b
xop2a1	|<<		ab -- c		; C
xop2a1	|>>		ab -- c		; C
xop2a1	|0>>	ab -- c		; C

1@	|@      a -- b     tos es ddat
1@	|C@     a -- b		tos es ddat
1@	|W@     a -- b      tos es ddat
1!	|!     ab --        tos es ddat
1!	|C!    ab --        tos es ddat
1!	|W!    ab --        tos es ddat
2+!	|+!    ab --        tos es ddat
2+!	|C+!   ab --        tos es ddat
2+!	|W+!   ab --        tos es ddat
2@	|@+     a -- bc     tos es ddat
2!	|!+    ab -- c      tos es ddat
2@	|C@+    a -- bc     tos es ddat
2!	|C!+   ab -- c      tos es ddat
2@	|W@+    a -- bc     tos es ddat
2!	|W!+   ab -- c      tos es ddat

v>a va> va@ va! va+ va@+ va!+
v>b vb> vb@ vb! vb+ vb@+ vb!+

vuso3	|MOVE  abc --       a,b es ddat
vuso3	|MOVE> abc --		a,b es ddat
vuso3	|FILL abc --		a,b es ddat
vuso3	|CMOVE abc --		a,b es ddat
vuso3	|CMOVE> abc --		a,b es ddat
vuso3	|CFILL abc --		a,b es ddat
v1cte	|MEM	-- a		a es ddat

:codestep | token --
	$ff and
	2 << 'vmc + @ exec ;


:tocode

	code!+ ;

|-----------------------------
:gencode2 | adr --
	dup 8 + @
	1 and? ( 2drop ; )	| code
	12 >> $fff and 0? ( 2drop ; )	| no calls
	drop

	codeini

    "--------------------------" ,s ,cr
	dup dicc - 4 >> ,codeinfo ,cr
	dup 12 + @	| mov
	$f and 		| uso
	DeepStack
	,printstk

	dup adr>dicname ,s ":" ,s ,cr

	adr>toklen
	( 1? )( 1- swap
		@+ tocode
		swap ) 2drop

	'bcode ( bcode> <? )(
		@+
		dup $ff and r3tokenname "; %s " ,print
		dup 8 >> 1? ( "%h " ,print )( drop )
		,printstk
		codestep
		) drop

	;

:gencode | adr --
	dup 8 + @
	1 and? ( 2drop ; )	| code
	12 >> $fff and 0? ( 2drop ; )	| no calls
	drop

    "--------------------------" ,s ,cr
	dup dicc - 4 >> ,codeinfo ,cr
	dup 12 + @	| mov
	$f and 		| uso
	DeepStack
	,printstk
	dup adr>dicname ,s ":" ,s ,cr
	adr>toklen
	( 1? )( 1- >r
		@+
		dup $ff and r3tokenname "; %s " ,print
		dup 8 >> 1? ( "%h " ,print )( drop )
		,printstk

		codestep
|		"r4asm/code.asm" savemem | debug

		r> ) 2drop
	,cr ;

:debugblok
	";---- bloques ----" ,s
	blok >a
	,cr
	nbloques ( 1? )( 1-
		nbloques over - "; %d. " ,print
		a@+ a@+ "%d %d " ,print ,cr
		) drop ;

::r3-gencode
	mark
	";---r3 compiler code.asm" ,ln
	dicc ( dicc> <? )(
		dup gencode2
		16 + ) drop

	debugblok

	0 ,c
	"r4asm/code.asm"
	savemem
	empty ;

