| r3-gencode
| PHREDA 2018
|
^./r3base.txt
^./r3asm.txt

#:ncell 0	| cnt cells

| Info de celdas
| RR WW FFFF
| R cnt de lecturas
| W cnt de escrituras
| flags........
|  $1 in W		| word
|  $2 out W
|  $4 in C		| call
|  $8 out C
| $10 var
| $20 dir var
| $40 dir code
| $80 copia de A en cellt
| $100 celda exec
| $800 celda ya asignada (para vreg)
| $1000 celda AD	x86
| $2000 celda C		x86
| $4000 no usar C

#:cells )( 1024
#:cellt )( 1024 | token de origen o celda
#:cellv )( 1024 | vida de celda | ff iii fff

:newcell | -- nro
	ncell
	0 over 2 << 'cells + !
	0 over 2 << 'cellt + !
	ncode over 2 << 'cellv + ! | inicio de vida
	dup 1+ 'ncell !
	;

:setcell | nro -- nro
	0 over 2 << 'cells + !
	0 over 2 << 'cellt + !
	ncode over 2 << 'cellv + ! | inicio de vida
	;

:endlive | nro --
	ncode 10 << swap 2 << 'cellv + +!  ;

:2code!+
	dup 4 - @ code!+ ;

|----- division by constant
| http://www.flounder.com/multiplicative_inverse.htm

#ad		| d absoluto
#t #anc #p
#q1 #r1
#q2 #r2

#divm	| magic mult
#divs   | shift mult

:calcstep
	1 'p +!
	q1 2* 'q1 ! r1 2* 'r1 !
	r1 anc >=? ( 1 'q1 +! anc neg 'r1 +! ) drop
	q2 2* 'q2 ! r2 2* 'r2 !
	r2 ad >=? ( 1 'q2 +! ad neg 'r2 +! ) drop
	;

:calcmagic | d --
	dup abs 'ad !
    $80000000 over 31 0>> + 't !
    t dup 1- swap ad mod - 'anc !
    31 'p !
    $80000000 anc / abs 'q1 !
    $80000000 q1 anc * - abs 'r1 !
	$80000000 ad / abs 'q2 !
	$80000000 q2 ad * - abs 'r2 !
	( calcstep
		ad r2 -	| delta
		q1 =? ( r1 0? ( swap 1+ swap ) drop )
		q1 >? )( drop ) drop
	q2 1+
	swap -? ( drop neg )( drop )
	'divm ! p 'divs ! ;

|--- ajuste por signo
:signadj!+ | --
	$23 code!+ 	| dup
	31 cte!+ 	| 31
	$45 code!+ 	| >>
	$3b code!+ 	| -
	;

|-----------------------------------
:idec | --
	getcte push.nro
	2code!+ ;

:ihex | --
	getcte2 push.nro
	2code!+ ;

:istr
	getval push.str
	2code!+ ;

|----------- inline cte
:d1 8 0>> src + getsrcnro push.nro ;
:d2 8 0>> push.str ;
:d3 8 0>> push.wrd ;

#tcte d1 d1 d1 d1 d2 d3 d3 d3

:icte | adr word -- adr
	dic>tok @ @ dup
	dup $ff and 7 - 2 << 'tcte + @ exec
	code!+
	;
|-----------

:ivar
	getval
	dup dic>inf @ $8 and? ( drop icte ; ) drop | inline
	push.var
	2code!+
	;

:idwor
	getval push.wrd
	2code!+ ;

:idvar
	getval push.wrd
	2code!+ ;


:iwor
	getval
	dup dic>du
|	dup ( 1? )( 1- tosoutC d.dropv ) drop
|	+ ( 1? )( 1- newcell d.push tosinC ) drop
	3drop
	2code!+
	;

:i;
	2code!+	;

:i(
	2code!+
	stk.push ;

:i)
	2code!+
	stk.pop	;

:i[
:i]
	;

:iex
|	lastdircode
|	dup ( 1? )( 1- tosoutC d.dropv ) drop
|	+ ( 1? )( 1- newcell d.push tosinC ) drop
	2code!+
	;

:gwhilejmp
	getval getiw
	1? ( stk.drop stk.push ) | while
	2drop
	;

:i0?
:i1?
:i+?
:i-?
	2code!+
	gwhilejmp
	;
:i<?
:i>?
:i=?
:i>=?
:i<=?
:i<>?
:iA?
:iN?
	2code!+
	.drop
	gwhilejmp ;
:iB?
	2code!+
	.2drop
	gwhilejmp ;

:iDUP	2code!+ .dup ;
:iDROP	2code!+ .drop ;
:iOVER	2code!+ .over ;
:iPICK2	2code!+ .pick2 ;
:iPICK3	2code!+ .pick3 ;
:iPICK4	2code!+ .pick4 ;
:iSWAP	2code!+ .swap ;
:iNIP	2code!+ .nip ;
:iROT	2code!+ .rot ;
:i2DUP	2code!+ .2dup ;
:i2DROP	2code!+ .2drop ;
:i3DROP	2code!+ .3drop ;
:i4DROP	2code!+ .4drop ;
:i2OVER	2code!+ .2over ;
:i2SWAP	2code!+ .2swap ;

:i>R .drop 2code!+ ;
:iR> .dup 2code!+ ;
:iR@ .dup 2code!+ ;

:iAND
	nro2stk 0? ( drop .AND ; ) drop
	2code!+
	.drop ;
:iOR
	nro2stk 0? ( drop .OR ; ) drop
	2code!+
	.drop ;
:iXOR
	nro2stk 0? ( drop .XOR ; ) drop
	2code!+
	.drop ;
:iNOT
	nro1stk 0? ( drop .NOT ; ) drop
	2code!+
	;
:iNEG
	nro1stk 0? ( drop .NEG ; ) drop
	2code!+
	;
:i+
	nro2stk 0? ( drop .+ ; ) drop
	2code!+
	.drop ;
:i-
	nro2stk 0? ( drop .- ; ) drop
	2code!+
	.drop ;

|---------------- *
| 8 * --> 3 <<
:*pot
	31 swap clz - cte!+
	$4b code!+
	;

| 7 * --> dup 3 << swap -
:*pot-1
	$23 code!+	| dup
	32 swap clz - cte!+
	$4b	code!+	| <<
	$29	code!+	| swap
	$3a code!+ | -
	;

:*nro
	code<<
	vTOS
	dup 1- nand? ( *pot ; )
	dup 1+ nand? ( *pot-1 ; )
	drop
	;

:i*
	nro2stk 0? ( drop .* ; ) drop
	nro1stk 0? ( drop *nro ; ) drop
	2code!+
	.drop ;

|---- cte / --> divm divs *>> dup 31 >> -
:/cte
	calcmagic
	divs cte!+
	divm cte!+
	$3e code!+ 		| *>>
	signadj!+ ;

|----  2 / --> dup 31 >> + 2/
:/cte2
	$23 code!+ | dup 31
	31 cte!+
	$4d code!+ | 0>>
	$39	code!+ | +
	$49	code!+ | 2/
	;

|----  4 / --> dup 31 >> 30 0>> + 2 >>
:/nro
	code<<
	vTOS 
	dup 1- and? ( /cte ; )
	2 =? ( /cte2 ; )
	swap
	31 cte!+
	$23 code!+
	$4c code!+ | >>
	33 32 pick2 clz - - cte!+ |30
	$4d code!+ | 0>>
	$39	code!+	| +
	31 swap clz - cte!+ | 2
	$4c code!+ | >>
	;

:i/
	nro2stk 0? ( drop ./ ; ) drop
	nro1stk 0? ( drop /nro ; ) drop
	2code!+
	.drop ;

|---------------- */
:i*/
	nro3stk 0? ( drop .*/ ; ) drop
	2code!+
	.2drop ;


|---------------- /MOD
:/modcte
	dup
	calcmagic
	$23 code!+		| dup
	divm cte!+
	divs cte!+
	$47 code!+ 		| *>>
	signadj!+
	$29	code!+	| swap
	$25	code!+	| over
	cte!+		| NRO
	$3B	code!+	| *
	$3A	code!+	| -
	;

|----  8 /mod --> dup / swap mod
:/MODnro
	code<<
	vTOS
	dup 1- and? ( /modcte ; )
	swap
    $23 code!+
	$23 code!+
    31 cte!+ | 31
	$4c code!+ | >>
	33 32 pick2 clz - - cte!+ |30
	$4d code!+ | 0>>
	$39	code!+	| +
	31 over clz - cte!+ 	| 2
	$4c code!+ | >>
	$29	code!+	| swap
	$23 code!+ | dup
	31 cte!+ |31
	$4c code!+ | >>
	33 32 pick2 clz - - cte!+
	$4d code!+	| 0>>
	$29	code!+	| swap
	$25	code!+	| over
	$39	code!+	| +
	1- cte!+  | mask
	$35 code!+	| AND
	$29	code!+	| swap
	$3A	code!+	| -
	;


:i/MOD
	nro2stk 0? ( drop ./MOD ; ) drop
	nro1stk 0? ( drop /MODnro ; ) drop
	2code!+
	;

|---------------- MOD
:modcte
	dup
	calcmagic
	divm cte!+
	$23 code!+
	divs cte!+
	$3e code!+ 		| *>>
	signadj!+
	cte!+	| NRO
	$3B	code!+	| *
	$3A	code!+	| -
	;

|----  8 mod --> $7 and
|	dup 31 >> (33-4)29 0>> swap over + 7 and swap -
:modnro
    code<<
	dup 1- and? ( modcte ; )
	31 cte!+
	$23 code!+ | dup 31
	$4c code!+ | >>
	33 32 pick2 clz - - cte!+
	$4d code!+	| 0>>
	$29	code!+	| swap
	$25	code!+	| over
	$39	code!+	| +
	1- cte!+ | mask
	$35 code!+	| AND
	$29	code!+	| swap
	$3A	code!+	| -
	;


:iMOD
	nro2stk 0? ( drop .MOD ; ) drop
	nro1stk 0? ( drop MODnro ; ) drop
	2code!+
	.drop ;

|------------------
:iABS
	nro1stk 0? ( drop .ABS ; ) drop
	2code!+
	;
:iSQRT
	nro1stk 0? ( drop .SQRT ; ) drop
	2code!+
	;
:iCLZ
	nro1stk 0? ( drop .CLZ ; ) drop
	2code!+
	;
:i<<
	nro2stk 0? ( drop .<< ; ) drop
	2code!+
	.drop ;
:i>>
	nro2stk 0? ( drop .>> ; ) drop
	2code!+
	.drop ;
:i>>>
	nro2stk 0? ( drop .>>> ; ) drop
	2code!+
	.drop ;
:i*>>
	nro3stk 0? ( drop .*>> ; ) drop
	2code!+
	.2drop ;
:i<</
	nro3stk 0? ( drop .<</ ; ) drop
	2code!+
	.2drop ;


:i@
:iC@
:iD@
	2code!+
	;
:i@+
:iC@+
:iD@+
	2code!+
	.dup
	;
:i!
:iC!
:iD!
	2code!+
	.2drop
	;
:i!+
:iC!+
:iD!+
	2code!+
	.drop
	;
:i+!
:iC+!
:iD+!
	2code!+
	.2drop
	;

:i>A	2code!+ .drop ;
:iA>	2code!+ .dup ;
:iA@	2code!+ .dup ;
:iA!	2code!+ .drop ;
:iA+    2code!+ .drop ;
:iA@+   2code!+ .dup ;
:iA!+   2code!+ .drop ;

:i>B    2code!+ .drop ;
:iB>    2code!+ .dup ;
:iB@    2code!+ .dup ;
:iB!    2code!+ .drop ;
:iB+    2code!+ .drop ;
:iB@+   2code!+ .dup ;
:iB!+   2code!+ .drop ;

:iMOVE
:iMOVE>
:iFILL
:iCMOVE
:iCMOVE>
:iCFILL
:iDMOVE
:iDMOVE>
:iDFILL
	2code!+
	.3drop ;
:iSYSCALL
	2code!+
	;
:iSYSMEM
	2code!+
	.drop
	;

#vmc
0 0 0 0 0 0 0		| 0 1 2 3 4 5 6

idec ihex idec idec istr    | 7 8 9 a b
iwor ivar idwor idvar		| c d e f

i; i( i) i[ i] iEX			| 10..15

i0? i1? i+? i-? i<? i>? i=? i>=? i<=? i<>? iA? iN? iB?	| 16..22

iDUP iDROP iOVER iPICK2 iPICK3 iPICK4 iSWAP iNIP		| 23..2A
iROT i2DUP i2DROP i3DROP i4DROP i2OVER i2SWAP			| 2B..31

i>R iR> iR@                                             | 32..34

iAND iOR iXOR iNOT iNEG									| 35..39
i+ i- i* i/ i*/                                         | 3A..3E
i/MOD iMOD iABS iSQRT iCLZ								| 3F..43
i<< i>> i>>> i*>> i<</									| 44..48

i@ iC@ iD@ i@+ iC@+ iD@+								| 49..4e
i! iC! iD! i!+ iC!+ iD!+								| 4f..54
i+! iC+! iD+!											| 55..57

i>A iA> iA@ iA! iA+ iA@+ iA!+
i>B iB> iB@ iB! iB+ iB@+ iB!+

iMOVE iMOVE> iFILL
iCMOVE iCMOVE> iCFILL
iDMOVE iDMOVE> iDFILL
iSYSCALL iSYSMEM

|------------------------------------------
:tocode | adr token -- adr
	$ff and
|	printstk cr
|	dup r3tokenname slog
	2 << 'vmc + @ exec

	;

|-----------------------------
:gencode2 | adr --
	dup 8 + @
	1 and? ( 2drop ; )	| code
	12 >> $fff and 0? ( 2drop ; )	| no calls
	drop

	codeini

    "--------------------------" ,s ,cr
	dup dicc - 4 >> ,codeinfo ,cr
	dup 12 + @	| mov
	$f and 		| uso
	DeepStack
	,printstk ,cr

	dup adr>dicname ,s ":" ,s ,cr

	dup adr>toklen
	( 1? )( 1- swap
		@+ tocode
		swap ) 2drop


	12 + @	| mov
	$f and 	| uso
	DeepStack

	'bcode ( bcode> <? )(
		@+

        ,printstk
		dup $ff and r3tokenname "; %s " ,print
		dup 8 >> 1? ( "%h " ,print )( drop )
		,cr

		codestep
|		"r4asm/code.asm" savemem | debug
		) drop

	;

:gencode | adr --
	dup 8 + @
	1 and? ( 2drop ; )	| code
	12 >> $fff and 0? ( 2drop ; )	| no calls
	drop

    "--------------------------" ,s ,cr
	dup dicc - 4 >> ,codeinfo ,cr
	dup 12 + @	| mov
	$f and 		| uso
	DeepStack
	,printstk ,cr
	dup adr>dicname ,s ":" ,s ,cr
	adr>toklen
	( 1? )( 1- >r
		@+
		,printstk
		dup $ff and r3tokenname "; %s " ,print
		dup 8 >> 1? ( "%h " ,print )( drop )
		,cr

		codestep
|		"r4asm/code.asm" savemem | debug

		r> ) 2drop
	,cr ;

:debugblok
	";---- bloques ----" ,s
	blok >a
	,cr
	nbloques ( 1? )( 1-
		nbloques over - "; %d. " ,print
		a@+ a@+ "%d %d " ,print ,cr
		) drop ;

::r3-gencode
	mark
	";---r3 compiler code.asm" ,ln
	dicc ( dicc> <? )(
		dup gencode2
		16 + ) drop

	debugblok

	0 ,c
	"r4asm/code.asm"
	savemem
	empty ;

