| VM r3
| PHREDA 2018
|-------------
^./vstack.txt
^./asm.txt

#niv )( 1024
#niv> 'niv
#nniv 0

:level+
	nniv niv> !+ 'niv> ! 1 'nniv +! ;
:level-
	-4 'niv> +! ;
:nlevel	| -- nl
	niv> 4 - @ $ffffff and 	;
:wlevel	| -- wl
	niv> 4 - @ 24 >> ;

:getcte
	;
:strmem
	0
	;

|----------------------

:i0 :i: :i:: :i# :i: :i| :i^	;
:g0 :g: :g:: :g# :g: :g| :g^    ;

:idec								|07	| 8 bits
	8 >> dup 24 << 24 >> .PUSHD ;
:gdec
	8 >> dup 24 << 24 >> .PUSHD ;

:ihex								|08 | rest bits
	8 >> .PUSHD 0 ;
:ghex
	8 >> .PUSHD 0 ;

:ibin								|09	| const 8
	8 >> getcte .PUSHD 0 ;
:gbin
	8 >> getcte .PUSHD 0 ;

:ifix								|0A | rest bits neg
	8 >> $ff000000 or .PUSHD 0 ;
:gfix
	8 >> $ff000000 or .PUSHD 0 ;

:istr								|0B	| nstr
	8 >> $ffffff and strmem + .PUSHD 0 ;
:gstr
	8 >> $ffffff and .PUSHD 0 ;

:iwor
	.PUSHD
	;
:gwor
	.PUSHD
	;

:ivar
	.PUSHD
	;
:gvar
	.PUSHD
	;

:idwor
	.PUSHD
	;
:gdwor
	.PUSHD
	;

:idvar
	.PUSHD
	;
:gdvar
	.PUSHD
	;


:next(
	;

:i;	;
:g;
	"ret" ,ln
	;

:i(
:g(
	level+
	nlevel "_li%h:" ,ln
	;

:i)
:g)
	wlevel 1? ( nlevel "jmp _li%h" ,ln ) drop
	nlevel "_lo%h:" ,ln
	level-
	;
:i[
:g[
:i]
:g]
	;

:iEX
	.EX ;
:gEX
	"call #0" ,asm
|	"jmp #0" ,asm
	;

:i0?
:g0?
	next(
	"or #0,#0" ,asm
	nlevel "jnz _lo%h" ,ln
	;

:i1?
:g1?
	next(
	"or #0,#0" ,asm
	nlevel "jz _lo%h" ,ln
	;

:i+?
:g+?
	next(
	"or #0,#0" ,asm
	nlevel "js _lo%h" ,ln
	;

:i-?
:g-?
	next(
	"or #0,#0" ,asm
	nlevel "jns _lo%h" ,ln
	;

:i<?
:g<?
	next(
	"cmp #1,#0" ,asm
	nlevel "jge _lo%h" ,ln
	;

:i>?
:g>?
	next(
	"cmp #1,#0" ,asm
	nlevel "jle _lo%h" ,ln
	;

:i=?
:g=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jne _lo%h" ,ln
	;

:i>=?
:g>=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jl _lo%h" ,ln
	;

:i<=?
:g<=?
	next(
	"cmp #1,#0" ,asm
	nlevel "jg _lo%h" ,ln
	;

:i<>?
:g<>?
	next(
	"cmp #1,#0" ,asm
	nlevel "je _lo%h" ,ln
	;

:iA?
:gA?
	next(
	"test #1,#0" ,asm
	nlevel "jnz _lo%h" ,ln
	;

:iN?
:gN?
	next(
	"test #1,#0" ,asm
	nlevel "jz _lo%h" ,ln
	;

:iB?
:gB?
	next(
	| sub nos2,nos
	| cmp nos,tos-nos
	"cmp #2,#1" ,asm
	nlevel "jge _lo%h" ,ln
	;


:i>R	|33
:g>R
	"push #0" ,asm ;

:iR>	|34
:gR>
	"pop #0" ,asm ;

:iR@	|35
:gR@
	"mov #0,[rSP]" ,asm ;


:iAND	|36
	.AND ;
:gAND
	"and #1,#0" ,asm ;

:iOR	|37
	.OR ;
:gOR
	"or #1,#0" ,asm ;

:iXOR	|38
	.XOR ;
:gXOR
	"xor #1,#0" ,asm ;

:iNOT	|39
	.NOT ;
:gNOT
	"not #0" ,asm ;

:iNEG	|3a
	.NEG ;
:gNEG
	"neg #0" ,asm ;

:i+
	.+ ;
:g+
	"add #1,#0" ,asm ;

:i-
	.- ;
:g-
	"sub #1,#0" ,asm ;

:i*
	.* ;
:g*
	"imul #1,#0" ,asm ;

:i/
	./ ;
:g/
	"cdq;idiv #1,#0" ,asm ;

:i*/
	.*/ ;
:g*/
	"imul #2,#1;idiv #0" ,asm
	;

:i/MOD
:g/MOD
	./MOD ;

:iMOD
:gMOD
	.MOD ;

:iABS
:gABS
	.ABS ;

:iSQRT
:gSQRT
	.SQRT ;

:iCLZ
:gCLZ
	.CLZ ;

:i<<
	.<< ;
:g<<
	"shl #1,#0" ,asm ;

:i>>
	.>> ;
:g>>
	"sar #1,#0" ,asm ;

:i0>>
	.0>> ;
:g0>>
	"shr #1,#0" ,asm ;


:i*>>
:g*>>
	.*>> ;

:i<</
	.<</ ;
:g<</
	;

:i@
	;
:g@
	"mov #0,[#0]" ,asm
	;

:iC@
	;
:gC@
	"movsx #0,byte [#0]" ,asm
	;

:iD@
	;
:gD@
	"movsx #0,dword [#0]" ,asm
	;

:i@+
	;
:g@+
	"mov #0,[#1];add #1,8" ,asm
	;

:iC@+
	;
:gC@+
	"movsx #0,byte [#1];add #1,1" ,asm
	;

:iD@+
	;
:gD@+
	"movsx #0,dword [#1];add #1,4" ,asm
	;

:i!	
	;
:g!
	"mov [#0],#1" ,asm
	;

:iC!
	;
:gC!
	"mov byte [#0],#1" ,asm
	;

:iD!
	;
:gD!
	"mov dword [#0],#1" ,asm
	;


:i!+
	;
:g!+
	"mov [#0],#1;add #0,8" ,asm
	;

:iC!+
	;
:gC!+
	"mov byte [#0],#1;add #0,1" ,asm
	;

:iD!+
	;
:gD!+
	"mov dword [#0],#1;add #0,4" ,asm
	;

:i+!
	;
:g+!
	"add [#0],#1" ,asm
	;

:iC+!
	;
:gC+!
	"add byte [#0],#1" ,asm
	;

:iD+!
	;
:gD+!
	"add dword [#0],#1" ,asm
	;

:i>A
	.>A ;
:g>A
	"mov rsi,#0" ,asm
	;

:iA>
	.A> ;
:gA>
	"mov #0,rsi" ,asm
	;

:iA@
	.A@ ;
:gA@
	"mov #0,[rsi]" ,asm
	;

:iA!
	.A! ;
:gA!
	"mov [rsi],#0" ,asm
	;

:iA+
	.A+ ;
:gA+
	"add rsi,#0" ,asm
	;

:iA@+
	.A@+ ;
:gA@+
	"mov #0,[rsi];add rsi,8" ,asm
	;

:iA!+
	.A!+ ;
:gA!+
	"mov [rsi],#0;add rsi,8" ,asm
	;


:i>B
	.>B ;
:g>B
	"mov rdi,#0" ,asm
	;

:iB>
	.B> ;
:gB>
	"mov #0,rdi" ,asm
	;

:iB@
	.B@ ;
:gB@
	"mov #0,[rdi]" ,asm
	;

:iB!
	.B! ;
:gB!
	"mov [rdi],#0" ,asm
	;

:iB+
	.B+ ;
:gB+
	"add rdi,#0" ,asm
	;

:iB@+
	.B@+ ;
:gB@+
	"mov #0,[rdi];add rdi,8" ,asm
	;

:iB!+
	.B!+ ;
:gB!+
	"mov [rdi],#0;add rdi,8" ,asm
	;


:iMOVE
:gMOVE

:iMOVE>
:gMOVE>
:iFILL
:gFILL
:iCMOVE
:gCMOVE
:iCMOVE>
:gCMOVE>
:iCFILL
:gCFILL

:iDMOVE
:gDMOVE

:iDMOVE>
:gDMOVE>

:iDFILL
:gDFILL

:iSYSCALL
:gSYSCALL

:iSYSMEM
:gSYSMEM
	;


#vml
i0 i: i:: i# i: i| i^		| 0 1 2 3 4 5 6
idec ihex ibin ifix istr    | 7 8 9 a b
iwor ivar idwor idvar		| c d e f
i; i( i) i[ i] iEX
i0? i1? i+? i-? i<? i>? i=? i>=? i<=? i<>? iA? iN? iB?
.DUP .DROP .OVER .PICK2 .PICK3 .PICK4 .SWAP .NIP
.ROT .2DUP .2DROP .3DROP .4DROP .2OVER .2SWAP
i>R iR> iR@
iAND iOR iXOR iNOT iNEG
i+ i- i* i/ i*/
i/MOD iMOD iABS iSQRT iCLZ
i<< i>> i0>> i*>> i<</
i@ iC@ iD@ i@+ iC@+ iD@+
i! iC! iD! i!+ iC!+ iD!+
i+! iC+! iD+!
i>A iA> iA@ iA! iA+ iA@+ iA!+
i>B iB> iB@ iB! iB+ iB@+ iB!+
iMOVE iMOVE> iFILL
iCMOVE iCMOVE> iCFILL
iDMOVE iDMOVE> iDFILL
iSYSCALL iSYSMEM


:vmstep
	$ff and 2 << 'vml + @ exec ;

::vmrun | adr -- adr'
	( @+ 1? )(
		( dup vmstep 8 0>> 0? ) drop
		) drop ;

#vmc
g0 g: g:: g# g: g| g^		| 0 1 2 3 4 5 6
gdec ghex gbin gfix gstr    | 7 8 9 a b
gwor gvar gdwor gdvar		| c d e f
g; g( g) g[ g] gEX
g0? g1? g+? g-? g<? g>? g=? g>=? g<=? g<>? gA? gN? gB?
.DUP .DROP .OVER .PICK2 .PICK3 .PICK4 .SWAP .NIP
.ROT .2DUP .2DROP .3DROP .4DROP .2OVER .2SWAP
g>R gR> gR@
gAND gOR gXOR gNOT gNEG
g+ g- g* g/ g*/
g/MOD gMOD gABS gSQRT gCLZ
g<< g>> g0>> g*>> g<</
g@ gC@ gD@ g@+ gC@+ gD@+
g! gC! gD! g!+ gC!+ gD!+
g+! gC+! gD+!
g>A gA> gA@ gA! gA+ gA@+ gA!+
g>B gB> gB@ gB! gB+ gB@+ gB!+
gMOVE gMOVE> gFILL
gCMOVE gCMOVE> gCFILL
gDMOVE gDMOVE> gDFILL
gSYSCALL gSYSMEM

::cgstep
	$ff and 2 << 'vmc + @ exec ;

|----------------
#tok $107 0
: 'tok vmrun ;